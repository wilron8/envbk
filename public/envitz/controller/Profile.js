/*
 * File: envitz/controller/Profile.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.controller.Profile', {
	extend: 'Ext.app.Controller',

	views: [
		'Profile'
	],

	refs: [
		{
			ref: 'addCountryCombo',
			selector: '#add_country'
		},
		{
			ref: 'addcity',
			selector: '#add_city'
		},
		{
			ref: 'addressview',
			selector: '#address_view'
		},
		{
			ref: 'certView',
			selector: '#certView'
		},
		{
			ref: 'form',
			selector: '#profileForm'
		},
		{
			ref: 'educationForm',
			selector: '#educationListForm'
		},
		{
			ref: 'experienceForm',
			selector: '#experienceListForm'
		},
		{
			ref: 'previewForm',
			selector: '#PreviewForm'
		},
		{
			ref: 'langCombo',
			selector: '#langCombo'
		},
		{
			ref: 'certCombo',
			selector: '#certCombo'
		},
		{
			ref: 'skillCombo',
			selector: '#skillCombo'
		},
		{
			ref: 'langView',
			selector: '#langView'
		},
		{
			ref: 'skillView',
			selector: '#skillView'
		},
		{
			ref: 'contactview',
			selector: '#contactview'
		},
		{
			ref: 'edFormList',
			selector: '#edFormList'
		},
		{
			ref: 'xpFormList',
			selector: '#xpFormList'
		}
	],

	onFormAfterRender: function(component, eOpts) {
		this.getForm().getForm().setValues(LApp.formData);

		//TODO: need to see why user photo is not set...
	},

	onEducationListAfterRender: function(component, eOpts) {
		var el = component.getEl();

		el.on('click', function() {
			this.createEducation();
		}, this, {
			delegate: '#add_education_btn'
		});

		el.on('click', function() {
			this.resetEducation();
		}, this, {
			delegate: '.cancel_education'
		});
	},

	onDoneProfileClick: function(button, e, eOpts) {
		//TODO: check for error on form submit and only redirect if no error.

		var form = this.getForm(),
			Json = Ext.JSON,
			me = this,
			contactStore = Ext.StoreMgr.lookup('contacts'),
			addressStore = Ext.StoreMgr.lookup('profileAddress'),
			skillStore = Ext.StoreMgr.lookup('userSkills'),
			certificateStore = Ext.StoreMgr.lookup('userCertificates'),
			langStore =  Ext.StoreMgr.lookup('profileLanguages'),
			edStore = Ext.StoreMgr.lookup('education'),
			xpStore = Ext.StoreMgr.lookup('experience');


		if (form.isValid()) { //TODO: show a mask on the form and let user know data is processing

			button.setText("Saving...");
			button.setDisabled(true); //prevent multiple clicks


			form.getForm().submit({
				submitEmptyText: false,
				method: "POST",
				params:{
					del_contact: Json.encode( me.getData(contactStore.getRemovedRecords()) ),
					c_contact: Json.encode( me.getData(contactStore.getModifiedRecords()) ),
					del_address: Json.encode( me.getData(addressStore.getRemovedRecords()) ),
					c_address: Json.encode( me.getData(addressStore.getModifiedRecords()) ),
					del_skill: Json.encode( me.getData(skillStore.getRemovedRecords()) ),
					c_skill: Json.encode( me.getData(skillStore.getModifiedRecords()) ),
					del_cert: Json.encode( me.getData(certificateStore.getRemovedRecords()) ),
					c_cert: Json.encode( me.getData(certificateStore.getModifiedRecords()) ),
					del_lang: Json.encode( me.getData(langStore.getRemovedRecords()) ),
					c_lang: Json.encode( me.getData(langStore.getModifiedRecords()) ),
					del_ed: Json.encode( me.getData(edStore.getRemovedRecords()) ),
					c_ed: Json.encode( me.getData(edStore.getModifiedRecords()) ),
					del_xp: Json.encode( me.getData(xpStore.getRemovedRecords()) ),
					c_xp: Json.encode( me.getData(xpStore.getModifiedRecords()) )
				},
				standardSubmit: true
			});
		}
	},

	onEduationViewClick: function(dataview, record, item, index, e, eOpts) {
		if (e.target.className === "delete") {
			this.deleteEducation(item, record);
		}
	},

	onExperienceListAfterRender: function(component, eOpts) {
		var el = component.getEl();

		el.on('click', function() {
			this.createExperience();
		}, this, {
			delegate: '.add_experience'
		});

		el.on('click', function() {
			this.resetExperience();
		}, this, {
			delegate: '.cancel_experience'
		});
	},

	onExperienceViewClick: function(dataview, record, item, index, e, eOpts) {
		if (e.target.className === "save") {
			this.updateExperience(item,record);
		}

		if (e.target.className === "delete") {
			this.deleteExperience(item,record);
		}
	},

	onPreviewActivate: function(component, eOpts) {
		var data = this.getForm().getForm().getValues(),
			previewForm = this.getPreviewForm(),
			genderStore = Ext.StoreMgr.lookup("gender"),
			genderRecord, dob = '', dt;

		previewForm.getForm().setValues(data);
		genderRecord = genderStore.findRecord('id', previewForm.down("#genderDisplay").value);


		previewForm.down("#genderDisplay").setValue(genderRecord.get('text'));

		//console.log(previewForm);
		previewForm.down('#previewImage').setSrc(this.getForm().down('#userImage').src);

		//display dob
		if (data['dob_year']) { dob = data['dob_year']; }

		if (data['dob_month']) {
			dt = new Date(2000, data['dob_month'] - 1, 1);
			dob += Ext.Date.format(dt, ' F');
		}

		if (data['dob_day']) { dob += (dob === null ? "" : " ") + data['dob_day']; }

		if (dob === '' ) { dob = "(not defined)"; }

		previewForm.down("#usr_dob").setValue(dob);

	},

	onBtnNewContactClick: function(button, e, eOpts) {
		var grid = this.getContactGrid(),
			rec = new envitz.model.contactModel({
				type: 1,
				value: ""
			}),
			edit = grid.getPlugin('editPlugin');

		edit.cancelEdit();
		grid.store.insert(0, rec);

		edit.startEditByPosition({
			row: 0,
			column:0
		});
	},

	onBtnDeleteContactClick: function(button, e, eOpts) {
		var grid = this.getContactGrid(),
			selection;

		selection = grid.getView().getSelectionModel().getSelection()[0];

		if (selection) {
			grid.store.remove(selection);
		}
	},

	onBtnCancelProfileFormClick: function(button, e, eOpts) {
		try {

			this.getForm().getForm().reset();				
			me = this;
			setTimeout(function(){	

				me.getForm().getForm().setValues(LApp.formData);
				me.getForm().down('#userImage').setSrc(LApp.user.photo);
				//me.getPreviewForm().down('#previewImage').setSrc(me.getForm().down('#userImage').src);
				console.log('update');
			}, 50);		
		} catch(e) {			
			console.log(e);
		}
		//location.reload();
		//window.location = "/idea";
		//this.getForm().getForm().setValues(LApp.formData);
		//console.log(this.getForm().down('#usr_icon'));
		//this.getForm().down('#usr_icon').setSrc(LApp.formData.usr_icon);
		//this.getPreviewForm().down('#formImage').setSrc(LApp.formData.usr_icon);
		//this.getForm().down('#formImage').setSrc(LApp.imageSrc);
		//this.getPreviewForm().down('#previewImage').setSrc(LApp.imageSrc);
	},

	onBtnAddLangClick: function(button, e, eOpts) {
		var store = Ext.StoreMgr.lookup('profileLanguages'),
			combo = this.getLangCombo(),
			row = {geoLang_name: combo.getRawValue(), geoLang_id: combo.getValue() };

		if (combo.getValue() !== null) {
			store.add(row);
			this.getLangView().refresh();
			combo.reset();

		}
	},

	onBtnAddSkillClick: function(button, e, eOpts) {
		var me = this,
			store = Ext.StoreMgr.lookup('userSkills'),
			combo = this.getSkillCombo(),
			skillStore = combo.getStore(),
			row,
			record = skillStore.findRecord('stag_id', combo.getValue());

		if (combo.getRawValue() === "") {
			Alert('Validation', "Skill is required");
			return;
		}

		if (record) {
			row = {stag_text: combo.getRawValue(), stag_id: combo.getValue()};
			store.add(row);
			this.getSkillView().refresh();

		} else {

			button.setDisabled(true);
			button.setWidth(80);
			button.setText('Checking...');

			Ext.Ajax.request({
				url: '/people/skill/api/create',
				params: {
					stag_text: combo.getRawValue()
				},
				success: function(response) {
					var obj = Ext.JSON.decode(response.responseText);

					skillStore.add({
						stag_text: obj.data.stag_text,
						stag_id: obj.data.stag_id
					});

					store.add({
						stag_text: obj.data.stag_text,
						stag_id: obj.data.stag_id
					});

					me.getSkillView().refresh();

					button.setDisabled(false);
					button.setWidth(23);
					button.setText('');
				}
			});
		}

		combo.reset();
	},

	onBtnAddCertClick: function(button, e, eOpts) {
		var me = this,
			combo = this.getCertCombo(),
			store, certStore, row, record;

		if (combo.getRawValue() !== "") {

			store = Ext.StoreMgr.lookup('userCertificates');
			certStore = combo.getStore();
			row = {
				cert_text: combo.getRawValue(),
				cert_id: combo.getValue()
			};
			record = certStore.findRecord('cert_id', combo.getValue());

			if (record) {
				store.add(row);
				this.getCertView().refresh();

			} else {
				button.setDisabled(true);
				button.setWidth(80);
				button.setText('Checking...');

				Ext.Ajax.request({
					url: '/people/certificate/api/create',
					params: {
						cert_text: combo.getRawValue()
					},
					success: function(response) {
						var obj = Ext.JSON.decode(response.responseText);

						certStore.add({ cert_id:obj.data.cert_id, cert_text: obj.data.cert_text});
						store.add({ cert_text: obj.data.cert_text, cert_id: obj.data.cert_id});

						me.getCertView().refresh();

						button.setDisabled(false);
						button.setWidth(23);
						button.setText('');
					}
				});
			}

			combo.reset();

		} else {
			Alert('Validation', "Certificate is required.");
		}

	},

	onDeleteSkillClick: function(dataview, record, item, index, e, eOpts) {
		var me = this,
			store;

		if (e.target.className === "delete") {
			store = Ext.StoreMgr.lookup('userSkills');
			store.removeAt(index);
			dataview.refresh();
			/*
			Ext.Msg.show({
				msg: "Are you sure you want to delete?",
				buttons: Ext.Msg.YESNO,
				title: 'Confirmation',
				icon: Ext.Msg.QUESTION,
				fn: function (button) {
					if (button == "yes") {
						store.removeAt(index);
						dataview.refresh();
					}
				}
			});
		*/
		}
	},

	onDeleteCertClick: function(dataview, record, item, index, e, eOpts) {
		var me = this,
			store;

		if (e.target.className === "delete") {
			store = Ext.StoreMgr.lookup('userCertificates');
			store.removeAt(index);
			dataview.refresh();
			/*
			Ext.Msg.show({
				msg: "Are you sure you want to delete?",
				buttons: Ext.Msg.YESNO,
				title: 'Confirmation',
				icon: Ext.Msg.QUESTION,
				fn: function (button) {
					if (button == "yes") {
						store.removeAt(index);
						dataview.refresh();
					}
				}
			});
		*/
		}
	},

	onDeleteLangClick: function(dataview, record, item, index, e, eOpts) {
		var me = this,
			store;

		if (e.target.className === "delete") {
			store = Ext.StoreMgr.lookup('profileLanguages');
			store.removeAt(index);
			dataview.refresh();
			/*
			Ext.Msg.show({
				msg: "Are you sure you want to delete?",
				buttons: Ext.Msg.YESNO,
				title: 'Confirmation',
				icon: Ext.Msg.QUESTION,
				fn: function (button) {
					if (button == "yes") {
						store.removeAt(index);
						dataview.refresh();
					}
				}
			});
		*/
		}
	},

	onFormAfterLayout: function(container, layout, eOpts) {
		var me = this,
			addrView = this.getAddressview(),
			contactView = this.getContactview();


		Ext.select('.addr_country').addListener('focus', function() {
			var input = Ext.get(this),
				div = Ext.get(input.findParentNode('div', 1)),
				id, index, combo;

			id = div.getAttribute('data');
			index = input.getAttribute('data-index');
			input.remove();

			combo = Ext.create('envitz.view.ComboSearchMultiFields', {
				index: index,
				displayTpl: '<tpl for=".">{geoContinent_region} / {geoCountry_roman} ( {geoCountry_name} )</tpl>',
				listConfig: {
					loadingText: 'Populating list...',
					//emptyText: "Wikipedia has no Countries?",
					getInnerTpl: function() {
						return '<tpl for="."><div data-qtip="[{geoCountry_id}] {geoContinent_region} / {geoCountry_roman}">{geoContinent_region} / {geoCountry_name} <IMG style="float:right" src="/images/icons/flags/{geoCountry_flagImg}" /></div></tpl>';
					}
				},
				searchFields: [
					'geoCountry_roman',
					'geoCountry_name',
					'geoCountry_ISO3166',
					'geoContinent_region'
				],
				maxHeight: 400,
				fieldLabel: '',
				name: 'uAddr_country',
				blankText: 'Please select a country.',
				emptyText: 'Select Country',
				displayField: 'geoCountry_name',
				store: 'countries',
				valueField: 'geoCountry_id',
				valueNotFoundText: 'Please select from the list of Countries',
				width: 290,
				style: {
					marginTop: '10px'
				},
				listeners: {
					change: function(component, new_value, old_value) {
						if (this.index) {
							me.bindUpdate('profileAddress', 'uAddr_country', new_value, this.index);
						}

					}
				},
				value: parseInt(id),
				renderTo: div
			});

			//console.log(combo.getValue());
			addrView.doComponentLayout();
		});




		/// CONTACT

		Ext.select('.contacttype').addListener('focus', function() {
			//alert('hi');
			var input = Ext.get(this),
				div = Ext.get(input.findParentNode('div', 1)),
				id, index, combo;

			id = div.getAttribute('data');
			index = input.getAttribute('data-index');
			input.remove();

			Ext.create('Ext.form.ComboBox', {
				fieldLabel: '',
				store: 'contactType',
				index: index,
				queryMode: 'local',
				displayField: 'type',
				width: 160,
				name: 'type',
				emptyText: 'Select type',
				style: {
					marginTop: '10px'
				},
				listeners:{
					change:function(component,new_value,old_value){
						if(this.index){
							me.bindUpdate('contacts','type',new_value,this.index);
						}

					}
				},
				valueField: 'id',
				value: parseInt(id),
				renderTo: div
			});

			contactView.doComponentLayout();
		});
	},

	onLocationAfterRender: function(component, eOpts) {
		var el = component.getEl();

		el.on('click', function() {
			this.addLocation();
		}, this, {
			delegate: '.add_location'
		});

		el.on('click', function() {
			this.resetLocation();
		}, this, {
			delegate: '.cancel_location'
		});
	},

	onLocationItemClick: function(dataview, record, item, index, e, eOpts) {
		if (e.target.className === "save") {
			this.updateLocation(item,record);
		}

		if (e.target.className === "remove") {
			this.deleteLocation(record);
		}
	},

	onContactItemClick: function(dataview, record, item, index, e, eOpts) {
		if (e.target.className === "remove") {
			this.deleteContact(record);
		}
	},

	onContactListAfterRender: function(component, eOpts) {
		var el = component.getEl();

		el.on('click', function() {
			this.addContact();
		}, this, {
			delegate: '.add_contact'
		});

		el.on('click', function() {
			this.resetContact();
		}, this, {
			delegate: '.cancel_contact'
		});
	},

	onEducationChange: function(dataview, eOpts) {
		var el = dataview.getEl();

		el.on('change', function(e, element) {
			var dom = Ext.get(element),
				index = dom.getAttribute('data-index'),
				field = dom.getAttribute('data-name'),
				value = dom.getValue();

			this.bindUpdate('education', field, value, index);
		}, this, {
			delegate: '.for-edit'
		});
	},

	onExperienceChange: function(dataview, eOpts) {
		var el = dataview.getEl();

		el.on('change', function(e, element) {
			var dom = Ext.get(element),
				index = dom.getAttribute('data-index'),
				field = dom.getAttribute('data-name'),
				value = dom.getValue();

			this.bindUpdate('experience', field, value, index);
		}, this, {
			delegate: '.for-edit'
		});
	},

	onContactChange: function(dataview, eOpts) {
		var el = dataview.getEl();

		el.on('change', function(e, element) {
			var dom = Ext.get(element),
				index = dom.getAttribute('data-index'),
				field = dom.getAttribute('data-name'),
				value = dom.getValue();

			this.bindUpdate('contacts', field, value, index);
		}, this, {
			delegate: '.for-edit'
		});
	},

	onAddressChange: function(dataview, eOpts) {
		var el = dataview.getEl();

		el.on('change', function(e, element) {
			var dom = Ext.get(element),
				index = dom.getAttribute('data-index'),
				field = dom.getAttribute('data-name'),
				value = dom.getValue();

			this.bindUpdate('profileAddress', field, value, index);
		}, this, {
			delegate: '.for-edit'
		});
	},

	onBtnAddLocationClick: function(button, e, eOpts) {
		var me = this,
			data = {},
			model,
			obj,
			record,
			locationStore = Ext.StoreMgr.lookup('profileAddress'),
			store = Ext.StoreMgr.lookup('countries'),
			combo = me.getAddCountryCombo(),
			reset = function () {
				combo.reset();
				me.getAddcity().setValue("");
			};

		data.uAddr_city = me.getAddcity().getValue();
		record = store.findRecord('geoCountry_id', combo.getValue());
		data.uAddr_country = "";

		if (data.uAddr_city === "" || combo.getRawValue() === "") {
			Alert("Validation", 'Please fill in information in both city and country');
			return;
		}

		button.setDisabled(true);

		if (record) {
			data.uAddr_country = record.get('geoCountry_id');
			locationStore.add(data);
			this.getAddressview().refresh();
			button.setDisabled(false);
			reset();

		} else {
			button.setText("Checking...");
			button.setWidth(80);

			Ext.Ajax.request({
				url: '/people/address/api/createCountry',
				params:{
					geoCountry_roman:combo.getRawValue()
				},
				success: function(response) {
					obj = Ext.JSON.decode(response.responseText);
					if (obj.success === true) {
						model = new envitz.model.country({
							geoCountry_id: obj.data.geoCountry_id,
							geoCountry_roman: obj.data.geoCountry_roman
						});
						store.add(model);
						data.uAddr_country = obj.data.geoCountry_id;
						locationStore.add(data);
						me.getAddressview().refresh();
						button.setDisabled(false);
						button.setText('');
						button.setWidth(23);
						reset();
					}
				}
			});
		}

		store.clearFilter();
	},

	onSkillComboFocus: function(component, e, eOpts) {
		var userSkill = Ext.StoreMgr.lookup('userSkills'),
			i,
			row,
			rows = userSkill.getRange(),
			skillStore = Ext.StoreMgr.lookup('skills');
		//set skillStore to prvevious state
		skillStore.rejectChanges();

		for (i = 0; i < rows.length; i++) {
			row = skillStore.findExact('stag_id', rows[i].get('stag_id'));
			skillStore.removeAt(row);
		}

		component.store = skillStore;
	},

	onLangComboFocus: function(component, e, eOpts) {
		var userLang = Ext.StoreMgr.lookup('profileLanguages'),
			i,
			row,
			rows = userLang.getRange(),
			langStore = Ext.StoreMgr.lookup('languages');

		langStore.rejectChanges();

		for (i = 0; i < rows.length; i++) {
			row = langStore.findExact('geoLang_id', parseInt(rows[i].get('geoLang_id')));
			langStore.removeAt(row);
		}

		component.store = langStore;
	},

	onCertComboFocus: function(component, e, eOpts) {
		var userCertificates = Ext.StoreMgr.lookup('userCertificates'),
			i,
			row,
			rows = userCertificates.getRange(),
			certStore = Ext.StoreMgr.lookup('certificates');

		certStore.rejectChanges();

		for (i = 0; i < rows.length; i++) {
			row = certStore.findExact('cert_id', rows[i].get('cert_id'));
			certStore.removeAt(row);
		}

		component.store = certStore;
	},

	init: function(application) {
				try {
					//init the dob stores:
					//console.log(this.getDobYearStore());
					Ext.StoreMgr.lookup('dobYear').on({
						load: function() {
							this.dataGen();
						}
						//load: function(){this.dataGen();}
					});

					Ext.StoreMgr.lookup('dobMonth').on({
						load: function() {
							this.dataGen();
						}
						//load: function(){this.dataGen();}
					});

					Ext.StoreMgr.lookup('dobDay').on({
						load: function() {
							this.dataGen(2012, 1);
						}
						//load: function(){this.dataGen();}
					});

				} catch (e) {
					if (Ext.isGecko) {
						console.warn("DOB stores.dataGen failed: " + e.message);
						console.debug(e);
					}
				}

		this.control({
			"#profileForm": {
				afterrender: this.onFormAfterRender,
				afterlayout: this.onFormAfterLayout
			},
			"#edFormList": {
				afterrender: this.onEducationListAfterRender,
				itemclick: this.onEduationViewClick,
				viewready: this.onEducationChange
			},
			"#btnDoneProfile": {
				click: this.onDoneProfileClick
			},
			"#xpFormList": {
				afterrender: this.onExperienceListAfterRender,
				itemclick: this.onExperienceViewClick,
				viewready: this.onExperienceChange
			},
			"#PreviewPanelProfile": {
				activate: this.onPreviewActivate
			},
			"#newContact": {
				click: this.onBtnNewContactClick
			},
			"#deleteContact": {
				click: this.onBtnDeleteContactClick
			},
			"#btnCancelProfile": {
				click: this.onBtnCancelProfileFormClick
			},
			"#btnAddLang": {
				click: this.onBtnAddLangClick
			},
			"#btnAddSkill": {
				click: this.onBtnAddSkillClick
			},
			"#btnAddCert": {
				click: this.onBtnAddCertClick
			},
			"#skillView": {
				itemclick: this.onDeleteSkillClick
			},
			"#certView": {
				itemclick: this.onDeleteCertClick
			},
			"#langView": {
				itemclick: this.onDeleteLangClick
			},
			"#address_view": {
				afterrender: this.onLocationAfterRender,
				itemclick: this.onLocationItemClick,
				viewready: this.onAddressChange
			},
			"#contactview": {
				itemclick: this.onContactItemClick,
				afterrender: this.onContactListAfterRender,
				viewready: this.onContactChange
			},
			"#btnAddLocation": {
				click: this.onBtnAddLocationClick
			},
			"#skillCombo": {
				focus: this.onSkillComboFocus
			},
			"#langCombo": {
				focus: this.onLangComboFocus
			},
			"#certCombo": {
				focus: this.onCertComboFocus
			}
		});
	},

	loading: function() {
		var xy=this.getForm().getXY(),
			height=this.getForm().getHeight(),
			width=this.getForm().getWidth(),
			dom = "<div class='loading' style='z-index:9999;position:absolute;left:" + xy[0] + "px;top:" + xy[1] + "px;width:" + width + "px;height:" + height + "px;'><img style='position:relative;left:" + width / 2 + "px;top:" + height / 2 + "px;' src='" + LApp.basePath + "/images/loading-animated.gif' /><div>";

		Ext.DomHelper.append(Ext.getBody(),dom);

		//TODO: Why are we not just passing the component reference and adding a mask to that component's parent container?
	},

	stopLoading: function() {
		Ext.select('div.loading').remove();
	},

	buildContactListForm: function() {

	},

	createEducation: function() {
		var data={},
			el = Ext.get('add_education_form'),
			store = Ext.StoreMgr.lookup('education'),
			rec = new envitz.model.education(data);

		data.ed_name = el.down('input[name="ed_name"]').getValue();
		data.ed_major = el.down('input[name="ed_major"]').getValue();
		data.ed_fromDate = el.down('input[name="ed_fromDate"]').getValue();
		data.ed_toDate = el.down('input[name="ed_toDate"]').getValue();

		if (data.ed_name !== ""){
			store.add(rec);
			this.getEdFormList().refresh();

		} else {
			//Alert('Validation', "Name of school is required.");
		}

	},

	createExperience: function() {
		var data={},
			el = Ext.get('add_experience_form'),
			store, rec;

		data.xp_name = el.down('input[name="xp_name"]').getValue();
		data.xp_jobTitle = el.down('input[name="xp_jobTitle"]').getValue();
		data.xp_fromDate = el.down('input[name="xp_fromDate"]').getValue();
		data.xp_toDate = el.down('input[name="xp_toDate"]').getValue();

		if (data.xp_name !== "") {
			store = Ext.StoreMgr.lookup('experience');
			rec = new envitz.model.experience(data);
			store.add(rec);
			this.getXpFormList().refresh();

		} else {
			Alert('Validation',"Name of organization is required.");
		}


	},

	deleteEducation: function(item, record) {
		var me = this,
			store = Ext.StoreMgr.lookup('education');

		Ext.MessageBox.confirm({
			msg: 'Are you sure you want to delete?',
			buttons: Ext.Msg.YESNO,
			title:'Confirmation',
			icon: Ext.Msg.QUESTION,
			fn: function(button) {
				if (button == "yes") {
					store.remove(record);
					me.getEdFormList().refresh();
				}
			}
		});
	},

	resetEducation: function() {
		var el = Ext.get('add_education_form');
		el.down('input[name="ed_name"]').dom.value="";
		el.down('input[name="ed_major"]').dom.value="";
		el.down('input[name="ed_fromDate"]').dom.value="";
		el.down('input[name="ed_toDate"]').dom.value="";

	},

	deleteExperience: function(item, record) {
		var me = this,
			store = Ext.StoreMgr.lookup('experience');

		Ext.MessageBox.confirm({
			msg: 'Are you sure you want to delete?',
			buttons: Ext.Msg.YESNO,
			title: 'Confirmation',
			icon: Ext.Msg.QUESTION,
			fn: function(button) {
				if (button == "yes") {
					store.remove(record);
					me.getXpFormList().refresh();
				}
			}
		});
	},

	cmpClearDisable: function(objectId, text) {
		var formComponent=this.getForm().down(objectId),
			flag=false;

		try{
			if (Ext.isEmpty(text)) {
				flag=true;
				formComponent.setValue("");
			}//end if text is blank

			formComponent.setDisabled(flag);

		}catch(e){}

	},

	addLocation: function() {
		var me = this,
			data = {},
			model,
			obj,
			record,
			locationStore = Ext.StoreMgr.lookup('profileAddress'),
			el = Ext.get('add_address_form'),
			store = Ext.StoreMgr.lookup('countries'),
			country = el.down('input[name="uAddr_country"]').getValue();

		data.uAddr_city = el.down('input[name="uAddr_city"]').getValue();
		record = store.findRecord('geoCountry_roman', country);
		data.uAddr_country = "";

		if (data.uAddr_city === "" || country === "") {
			alert('Please fill in information in both city and country');

		} else {

			if (record) {
				data.uAddr_country = record.get('geoCountry_id');
				locationStore.add(data);
				this.getAddressview().refresh();

			} else {
				Ext.Ajax.request({
					url: '/people/address/api/createCountry',
					params:{
						geoCountry_roman:country
					},
					success: function(response) {
						obj = Ext.JSON.decode(response.responseText);

						if (obj.success === true) {
							model = new envitz.model.country({
								geoCountry_id: obj.data.geoCountry_id,
								geoCountry_roman: obj.data.geoCountry_roman
							});
							store.add(model);
							data.uAddr_country = obj.data.geoCountry_id;
							locationStore.add(data);
							me.getAddressview().refresh();
						}
					}
				});
			}

			store.clearFilter();
		}
	},

	createCountryCombo: function(value, container) {
		// Why do we have this function?
		// If we need, then why does it not use the ComboSearchMultiFields extension?

		Ext.create('Ext.form.ComboBox', {
		    fieldLabel: 'Choose State',
		    store: states,
		    queryMode: 'local',
		    displayField: 'name',
		    valueField: 'geoCountry_id',
		    renderTo: Ext.getBody()
		});

	},

	deleteLocation: function(record) {
		var me = this;

		Ext.MessageBox.confirm({
			msg: 'Are you sure you want to delete?',
			buttons: Ext.Msg.YESNO,
			title: 'Confirmation',
			icon: Ext.Msg.QUESTION,
			fn: function(button) {
				if (button == "yes") {
					var locationStore = Ext.StoreMgr.lookup('profileAddress');
					locationStore.remove(record);
					me.getAddressview().refresh();
				}
			}
		});
	},

	addContact: function(dom) {
		var data={},
			el = Ext.get('contact_form'),
			store = Ext.StoreMgr.lookup('contactType'),
			contactStore = Ext.StoreMgr.lookup('contacts'),
			record = store.findRecord('type',el.down('input[name="type"]').getValue());

		data.value = el.down('input[name="value"]').getValue();
		data.type = "";

		if (record) {
			data.type = record.get('id');
		}

		if(data.type==="" || data.value===""){
			Alert('Validation','Please fill in information in both type and value');

		} else {

			contactStore.add(data);
			this.getContactview().refresh();

		}

	},

	deleteContact: function(record) {
		var me = this,
			store = Ext.StoreMgr.lookup('contacts');

		Ext.MessageBox.confirm({
			msg: 'Are you sure you want to delete?',
			buttons: Ext.Msg.YESNO,
			title: 'Confirmation',
			icon: Ext.Msg.QUESTION,
			fn: function(button) {
				if (button == "yes") {
					store.remove(record);
					me.getContactview().refresh();
				}
			}
		});

	},

	resetExperience: function() {
		var el = Ext.get('add_experience_form');

		// Why are we not using the form.setValue() function here?

		el.down('input[name="xp_name"]').dom.value = "";
		el.down('input[name="xp_jobTitle"]').dom.value = "";
		el.down('input[name="xp_fromDate"]').dom.value = "";
		el.down('input[name="xp_toDate"]').dom.value = "";
	},

	resetContact: function() {
		var el = Ext.get('contact_form');

		// Why are we not using the form.setValue() function here?

		el.down('input[name="value"]').dom.value = "";
		el.down('input[name="type"]').dom.value = "";
	},

	resetLocation: function() {
		var el = Ext.get('add_address_form');

		// Why are we not using the form.setValue() function here?

		el.down('input[name="uAddr_city"]').dom.value = "";
		el.down('input[name="uAddr_country"]').dom.value = "";

	},

	bindUpdate: function(store, field, value, index) {
		var store = Ext.StoreMgr.lookup(store),
			record = store.getAt(index);

		record.beginEdit();
		record.set(field,value);
		record.endEdit();
	},

	getData: function(recordSet) {
		var i, data=[];

		for(i = 0; i < recordSet.length; i++){
			data.push(recordSet[i].data);
		}

		return data;
	}

});
