/*
 * File: envitz/controller/Idea.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.controller.Idea', {
	extend: 'Ext.app.Controller',

	refs: [
		{
			ref: 'ideaRef',
			selector: '#ideaRef'
		},
		{
			ref: 'form',
			selector: '#submitForm'
		},
		{
			ref: 'preview',
			selector: '#displayForm'
		},
		{
			ref: 'formYoutube',
			selector: '#formYoutube'
		},
		{
			ref: 'youtube',
			selector: '#displayYoutube'
		},
		{
			ref: 'boxSelect',
			selector: '#idea_reference'
		},
		{
			ref: 'legalAccept',
			selector: '#idea_legalAccept'
		}
	],

	onAddIdeaRefClick: function(button, e, eOpts) {
		var id = this.getIdeaRef().getValue(),
			idea, record;

		if ( !Ext.StoreMgr.lookup('ideaRef').findRecord('idea_id', id) ) {

			idea = this.getIdeaRef().getStore().findRecord('idea_id', id);

			record = new envitz.model.ideaRef({
				idea_id: id,
				idea_title: idea.get('idea_title'),
				idea_img: idea.get('idea_img'),
				url: idea.get('url')
			});

			Ext.StoreMgr.lookup('ideaRef').insert(0, record);
		}

	},

	onComboReferenceFocus: function(component, e, eOpts) {
		var idea_store = Ext.StoreMgr.lookup('idea');

		if (idea_store.findRecord('idea_id', LApp.ideaId)) {
			idea_store.remove(record);
		}

		this.getBoxSelect().store = idea_store;

	},

	onSubmitButtonIdeaClick: function(button, e, eOpts) {
		var me = this,
			id = [],
			store =Ext.StoreMgr.lookup('ideaRef'),
			thisForm = me.getForm();


		store.data.each(function(){
			id.push(this.data.idea_id);//'this' here refers to a data item of the store
		});


		if (!me.getLegalAccept().getValue()) {
			Alert("Idea Manager", "If you agree to the terms of service, your idea will be saved.");

		} else {


			button.setText("Saving...");
			button.setDisabled(true); //prevent rabbit clickers.

			thisForm.getForm().submit({
				standardSubmit: true, //TODO: should change this to use JSON reply...
				submitEmptyText: false,
				url:document.URL,
				params: {
					reference: id.join('|')
				},
				failure: function(bForm, action){
					button.setDisabled(false);
					button.setText("Save");
					try{//FireFox goes here on error
						if(action && action.result){
							if(Ext.isGecko){ console.log("'Idea Manager'", action.result.error);}
							Alert('Idea Manager', action.result.error);
						}else{
							if(Ext.isGecko){ console.log("'Idea Manager' : check connectivity");}
							Alert('Idea Manager', "Network Operation Timed-out. Your connection to the server was lost. Please check your Internet connection and try again later.");
						}
					}catch(e){Ext.Error.raise(' Idea save failure\n' + e.description);}
				}
			});
		}

	},

	onPreviewActivate: function(component, eOpts) {
		var record,
			values = this.getForm().getForm().getValues(),
			url = this.getYoutubeId(values.idea_attachment),
			ref = this.getForm().down('#idea_reference').getValue(),
			refStore = Ext.StoreMgr.lookup('ideaRef'),
			tpl = new Ext.XTemplate(
				'<iframe width="330" height="197" src="//www.youtube.com/embed/{url}" frameborder="0" allowfullscreen></iframe>'
			),
			evolution_tpl = new Ext.XTemplate(
				'<div><img src="{idea_img}" width="34" /> <span style="display:inline-block;">{idea_title} </span></div>'
			);


		this.getPreview().getForm().setValues(values);


		//remove all existing duplicate references in store
		refStore.removeAll();

		//add current ref
		try {
			ref.forEach(function(el, index) {
				record = Ext.StoreMgr.lookup('idea').findRecord('idea_id', el);
				if(record) {
					refStore.add(record);
				}
			});
		} catch(e) {
			if (Ext.isGecko()) {
				console.debug(e);
			}
		}

		if (values.idea_categoryID && Ext.StoreMgr.lookup('category').getCount() > 0){
			this.getPreview().down('#displayCategory').setValue('(' + Ext.StoreMgr.lookup('category').findRecord('cat_id', values.idea_categoryID).get('cat_text') + ')');
		}

		if (!values.idea_title){
			this.getPreview().down('#title_preview').setValue('<i>(No title)</i>');
		}

		//display youtube video if any
		if (url) {
			tpl.overwrite(this.getYoutube().el, {url:url});
		}

		if ( Ext.StoreMgr.lookup('idea').getCount() > 0 ) {
			// display evolution if any
			if(LApp.parent) {
				record = Ext.StoreMgr.lookup('idea').findRecord('idea_id', LApp.parent);
				if(record){
					evolution_tpl.overwrite(this.getPreview().down('#ascending').el, record.data);
				}

			}

			// display evolution if any
			if(LApp.child) {
				record = Ext.StoreMgr.lookup('idea').findRecord('idea_id', LApp.child);
				if(record){
					evolution_tpl.overwrite(this.getPreview().down('#descending').el, record.data);
				}

			}
		}
	},

	onFormAfterRender: function(component, eOpts) {
		component.getForm().setValues(LApp.formData);

		if (LApp.formData.idea_attachment !== null) {
			var url = this.getYoutubeId(LApp.formData.idea_attachment);
			if (url) {
				var tpl = new Ext.XTemplate(
					'<iframe width="330" height="197" src="//www.youtube.com/embed/{url}" frameborder="0" allowfullscreen></iframe>'
				);
				tpl.overwrite(this.getFormYoutube().el, {url: url});
			}
		}

		// bind terms of service click event

		component.getEl().on('click', function(e,t) {
			e.preventDefault();
			this.redirectURLclick(t);
		}, this, {
			delegate: '.term_of_service'
		});
	},

	onYoutubeLinkChange: function(field, newValue, oldValue, eOpts) {
		var tpl = new Ext.XTemplate(
			'<iframe width="330" height="197" src="//www.youtube.com/embed/{url}" frameborder="0" allowfullscreen></iframe>'
		),
			url = this.getYoutubeId(newValue);

		if(url){
			tpl.overwrite(this.getFormYoutube().el, {url:url});
		}
	},

	onDataviewItemClick: function(dataview, record, item, index, e, eOpts) {
		if (e.target.className === "delete") {
			dataview.getStore().removeAt(index);
		}

	},

	onBtnCancelIdeaClick: function(button, e, eOpts) {
		//window.location = "/idea";
		// This should detect if update... and if so, return that idea view page
		// /idea/update/9 should be redirected to /idea/9
		try {

			this.getForm().getForm().reset();				
			me = this;
			if (LApp.imageSrc) {	
						
				setTimeout(function(){
					me.getForm().getForm().setValues(LApp.formData);
				
					if ( LApp.formData.idea_attachment !== null ) {
						var url = me.getYoutubeId(LApp.formData.idea_attachment);
						if (url) {
							var tpl = new Ext.XTemplate(
								'<iframe width="330" height="197" src="//www.youtube.com/embed/{url}" frameborder="0" allowfullscreen></iframe>'
							);
							tpl.overwrite(me.getFormYoutube().el, {url: url});
						}
					}

					me.getForm().down('#userImage').setSrc(LApp.imageSrc);					
				}, 50);	
				

				//this.getForm().getForm().down('#idea_reference').setValue(LApp.formData.reference[]);
				
				/*Ext.get('image-1016').remove();
				var changingImage = Ext.create('Ext.Img', {
				    src: LApp.imageSrc,
				    renderTo: 'imagePreview-1015-innerCt',
				    cls: 'x-img x-abs-layout-item x-img-default',
				    //id: 'image-1016',
				    style: {
				    	width:'64px',
				    	height:'64px'
				    },
				    index: 0,				    
				});

				changingImage.setSrc(LApp.imageSrc);*/

				//Ext.getCmp('userImage').getEl().dom.src = "/images/lightBulb.svg"; 
				//var textnode = '<img class="x-img x-abs-layout-item x-img-default" style="width:64px;height:64px;" id="image-1016" src="'+LApp.imageSrc+'">';
				//var newItem = document.createElement("img","[class:x-img x-abs-layout-item x-img-default][style:width:64px;height:64px;][id:image-1016][src:"+LApp.imageSrc+"]"); 
				/*Ext.get('image-1016').remove();
				var newElem = document.createElement("img");
				newElem.setAttribute("class", "x-img x-abs-layout-item x-img-default");
				newElem.setAttribute("style", "width:64px;height:64px;");
				newElem.setAttribute("id", "image-1016");
				newElem.setAttribute("src", LApp.imageSrc);				
				document.getElementById("imagePreview-1015-innerCt").appendChild(newElem);
			
				var elemContainer = document.getElementById("imagePreview-1015-innerCt")      
				elemContainer.insertBefore(newElem, elemContainer.childNodes[0]);   */
					
				//this.getForm().down('#userImage').setHtml('<img class="x-img x-abs-layout-item x-img-default" style="width:64px;height:64px;" id="image-1016" src="'+LApp.imageSrc+'"/>'); // in src you can give path of your image			
				//console.log(this.getForm().getEl().down('input[type="file"]').value);

				//var newValue = this.getForm().getEl().down('input[type="file"]').value = '';
                //this.getForm().getEl().down('input[type="file"]').setRawValue(newValue);
				//this.getForm().getEl().down('input[type="file"]');
				//console.log(this.getForm().getEl().down('input[type="file"]').value);

			} else {						
				setTimeout(function(){
					var tpl = new Ext.XTemplate(
								'<img class="x-img x-img-default" style="width:330px;height:200px;" id="image-1049" src="/images/img_idea.png">'
							);
							tpl.overwrite(me.getFormYoutube().el, '');								
					me.getForm().down('#userImage').setSrc('/images/lightBulb.svg');															
				}, 50);
			}

		} catch(e) {
			
			console.log(e);
		}
		
		
		//youtube image
		//config.src=LApp.basePath+'/images/img_idea.png';
		//Image 

	},

	getYoutubeId: function(url) {
		var regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/,
			match = url.match(regExp);

		if (match && match[2].length === 11) {
			return match[2];
		} else {
			return false;
		}

	},

	reCenterWin: function(winID) {
		//recenter the TOS window if open
		try {
			var myWinID = Ext.getCmp(winID);
			if(myWinID) myWinID.center();
		} catch (e) {}

	},

	redirectURLclick: function(target) {
		var win=null,
			sWidth=950,
			sHeight=500,
			Width= Ext.dom.AbstractElement.getViewportWidth(),
			Height= Ext.dom.AbstractElement.getViewportHeight();

		if (Width < sWidth) {
			sWidth=Width*0.9;
		} else { //wide screen?
			sWidth=Width*0.6;
		}//end if Width

		if (Height < sHeight) {
			sHeight=Height*0.9;
		} else { //wide screen?
			sWidth=Width*0.6;
		}//end if Height

		if (target) {
			win = Ext.widget('window', {
				title: 'Terms of Use',
				id: 'TOSwin',
				maximizable: true,
				modal: true,
				html: '<iframe id="TOSwinF" src="' + target.href + '" width="' + sWidth + '" height="' + sHeight + '" style="border:0"></iframe>',
				buttons: [{
					text: 'I have read and understood these terms...',
					handler: function() {
						this.up('window').close();
					}
				}]
			});
			win.show();
			e.preventDefault();
		}//end if target

	},

	init: function(application) {
		this.control({
			"#addIdeaRef": {
				click: this.onAddIdeaRefClick
			},
			"#categoryDisplay": {
				focus: this.onComboReferenceFocus
			},
			"#btnSubmitIdea": {
				click: this.onSubmitButtonIdeaClick
			},
			"#previewTab": {
				activate: this.onPreviewActivate
			},
			"#submitForm": {
				afterrender: this.onFormAfterRender
			},
			"#youtubeLink": {
				change: this.onYoutubeLinkChange
			},
			"#referenceListView": {
				itemclick: this.onDataviewItemClick
			},
			"#btnCancelIdea": {
				click: this.onBtnCancelIdeaClick
			}
		});
	}

});
