/*
 * File: envitz/controller/Settings.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.controller.Settings', {
	extend: 'Ext.app.Controller',

	views: [
		'Settings'
	],

	refs: [
		{
			ref: 'emailList',
			selector: '#emailListView'
		},
		{
			ref: 'form',
			selector: '#settingsForm'
		},
		{
			ref: 'tabPanel',
			selector: 'settingsTabPanel'
		},
		{
			ref: 'previewForm',
			selector: '#PreviewForm'
		}
	],

	onAddrCountryChange: function(field, newValue, oldValue, eOpts) {

	},

	onAddrStateChange: function(field, newValue, oldValue, eOpts) {

	},

	onAddrCityChange: function(field, newValue, oldValue, eOpts) {
		var me=this;


		if (newValue !== "" && newValue !== "   ( Loading... )" ){
			try{
				var isQueryOk = false,
					geoCity = null,
					cityStore = Ext.StoreMgr.lookup("cities"),
					//cityRecord = cityStore.getById("" + newValue);
					cityRecord = cityStore.findRecord('geoCity_id', newValue);

				if (cityRecord !== null) {

					console.log(cityRecord.data);


					var phoneStore = Ext.StoreMgr.lookup("phoneAreaCode");
					var zipStore = Ext.StoreMgr.lookup("zipCodes");

					//grab DB list of zipCodes
					var geoURL = cityRecord.data.geoCity_ISO3166;

					if(cityRecord.data.geoCity_ISO3166_2) {
						geoURL += "/" + cityRecord.data.geoCity_ISO3166_2;
						isQueryOk = true;
					}

					if(cityRecord.data.geoCity_cityName) {
						if (cityRecord.data.geoCity_cityName.indexOf(" ") > 1) {
							geoCity = cityRecord.data.geoCity_cityName;
						} else{
							geoURL += "/" + cityRecord.data.geoCity_cityName;
						}
					}

					zipStore.removeAll(); //force the zip code comboBox to clear...
					me.getForm().down("[itemId=joinAddrZIP]").setValue(cityRecord.data.geoCity_PostalCode);

					if ( isQueryOk ) {
						zipStore.load({ //now grab zipCodes assoicated with selected city
							url: "/API/listZipCodes/" + geoURL,
							params: {
								//id: cityRecord.data.geoCity_id
								start: 0,
								limit: 100,
								//dir: "DESC"
								city: geoCity
							},
							callback: function (records, operation, success) {
								if (success) {
									if ( cityRecord.data.geoCity_PostalCode !=="" ) {
										//me.getForm().down("[itemId=joinAddrZIP]").reset();
									}
								} else {
									Alert("DataBase - Error", "Database error or connection failure. \n Unable to update ZipCodes.");
								}//end if success
							},
							scope: me,
							add: false // force data to reload
						});
					}

					phoneStore.removeAll(); //force the area code comboBox to clear...
					me.getForm().down("[itemId=joinPhoneAreacode]").setValue(cityRecord.data.geoCity_areaCode);

					if ( isQueryOk ) {
						phoneStore.load({ //now grab areaCodes assoicated with selected city
							url: "/API/listAreaCodes/" + geoURL,
							params: {
								//id: cityRecord.data.geoCity_id
								start: 0,
								limit: 50,
								//dir: "DESC"
								city: geoCity
							},
							callback: function (records, operation, success) {
								if (success) {
									if ( cityRecord.data.geoCity_areaCode !=="" ) {
										//me.getForm().down("[itemId=joinPhoneAreacode]").reset();
									}
								} else {
									Alert("DataBase - Error", "Database error or connection failure. \n Unable to update AreaCodes.");
								}//end if success
							},
							scope: me,
							add: false // force data to reload
						});
					}
				}
			}catch(e){}
			}
	},

	onSettingResetClick: function(button, e, eOpts) {		
		try {	
			this.getForm().getForm().setValues(LApp.formData);
		} catch(e) {			
			console.log(e);
		}		
	},

	onSettingFormSubmit: function(button, e, eOpts) {
		//TODO: Change this to standardSubmit: false and require JSON response

		this.getForm().getForm().submit({
			submitEmptyText: false,
			method: "POST",
			standardSubmit: true,
			url: LApp.basePath + "/settings"
		});
	},

	onTabpanelAfterRender: function(component, eOpts) {
		//console.log('after window renderer');
	},

	onFormAfterRender: function(component, eOpts) {
		component.getForm().setValues(LApp.formData);
		//this.buildEmailList(component.down('#email_table_list'));
	},

	onPreviewActivate: function(component, eOpts) {
		var data = this.getForm().getForm().getValues();

		data.account = this.getForm().down('#userAccount').getValue();

		this.getPreviewForm().getForm().setValues(data);

		this.bindPreviewField(this.getPreviewForm());

	},

	onEmailListAfterRender: function(component, eOpts) {
		var el = component.getEl();

		el.on('click', function() {
			this.createEmail(Ext.get('EmailInput').dom.value);
		}, this, {
			delegate: '.addEmail'
		});

		el.on('click', function() {
			Ext.get('EmailInput').dom.value="";
		}, this, {
			delegate: '.cancelEmail'
		});
	},

	onEmailViewClick: function(dataview, record, item, index, e, eOpts) {
		if (e.target.className === "isPrimaryEmail") {
			this.setEmailPrimary(record.data.uEmail_email, e.target);
		}

		if (e.target.className === "deleteEmail") {
			if(record.data.isPrimary === true){
				Alert('Primary email cannot be deleted.');
				return;
			}
			this.deleteEmail(record.data.uEmail_email);
		}

		if (e.target.className === "reverifyEmail") {
			this.verifyEmail(record.data.uEmail_email);
		}
	},

	init: function(application) {
		this.control({
			"#joinAddrCountry": {
				change: this.onAddrCountryChange
			},
			"#joinAddrState": {
				change: this.onAddrStateChange
			},
			"#joinAddrCity": {
				change: this.onAddrCityChange
			},
			"#btnResetSettings": {
				click: this.onSettingResetClick
			},
			"#btnSubmitSettings": {
				click: this.onSettingFormSubmit
			},
			"#settingsTabPanel": {
				afterrender: this.onTabpanelAfterRender
			},
			"#settingsForm": {
				afterrender: this.onFormAfterRender
			},
			"#PreviewPanel": {
				activate: this.onPreviewActivate
			},
			"#emailListView": {
				afterrender: this.onEmailListAfterRender,
				itemclick: this.onEmailViewClick
			}
		});
	},

	bindPreviewField: function(previewForm) {
		var countryStore,
			countryRecord,
			languageStore,
			languageRecord,
			phoneStore,
			phoneRecord;

		try {

			countryStore = Ext.StoreMgr.lookup("countries");
			countryRecord = countryStore.findRecord('geoCountry_id', previewForm.down("#countryDisplay").value);
			previewForm.down("#countryDisplay").setValue(countryRecord.get('geoCountry_name'));

			languageStore = Ext.StoreMgr.lookup("languages");
			languageRecord = languageStore.findRecord('geoLang_id', previewForm.down("#languageDisplay").value);
			previewForm.down("#languageDisplay").setValue(languageRecord.get('geoLang_name'));

			//display phone type
			phoneStore = Ext.StoreMgr.lookup("phoneType");
			phoneRecord = phoneStore.findRecord('id', previewForm.down("#phoneType").value);

			if(phoneRecord){
				previewForm.down("#phoneType").setValue(phoneRecord.get('text'));
			}

			//build email list
			this.buildEmailPreview(previewForm.down('#email_table_preview'));

		} catch (e) {
			//<debug>
			Ext.Error.raise("Error occurred while attempting to create the preview. " + e);
			//</debug>
		}
	},

	buildEmailPreview: function(component) {
		var i,
			data = [],
			all = Ext.StoreMgr.lookup("emails").getRange(),
			tpl = new Ext.XTemplate(
				'<table class="email-list">',
				'   <tr>',
				'       <td style="width:200px;"></td>',
				'       <td>Verified</td>',
				'       <td>Primary</td>',
				'   </tr>',
				'<tpl for=".">',
				'   <tr>',
				'       <td>{uEmail_email}</td>',
				'       <td>',
				'           <tpl if="uEmail_isVerified==1">',
				'               Yes',
				'           <tpl else>',
				'               No',
				'           </tpl>',
				'       </td>',
				'       <td>',
				'           <tpl if="isPrimary==1">',
				'               Yes',
				'           <tpl else>',
				'               No',
				'           </tpl>',
				'       </td>',
				'   </tr>',
				'</tpl>',
				'</table>'
			);

		for (i = 0; i < all.length; i++) {
			data.push(all[i].data);
		}

		tpl.overwrite(component.el, data);


	},

	buildEmailList: function(component) {
		var store,
			controller = this,
			tpl = new Ext.XTemplate(
				'<table id="email_form_list" class="email-list">',
				'   <tr>',
				'       <td></td>',
				'       <td>Verified</td>',
				'       <td>Primary</td>',
				'       <td>',
				'		</td>',
				'   </tr>',
				'<tpl for=".">',
				'   <tr>',
				'       <td>{uEmail_email}</td>',
				'       <td>',
				'           <tpl if="uEmail_isVerified==1">',
				'               Yes',
				'           <tpl else>',
				'               No <span class="reverifyEmail" style="text-decoration:underline;cursor:pointer;" value="{uEmail_email}" >(resend)</span>',
				'           </tpl>',
				'       </td>',
				'       <td>',
				'           <tpl if="uEmail_isVerified==1">',
				'               <input class="isPrimaryEmail" type="radio" value="{uEmail_email} " name = "primaryRadio" {[this.isChecked(values.isPrimary)]} />',
				'           </tpl>',
				'       </td>',
				'       <td><span class="deleteEmail" style="text-decoration:underline;cursor:pointer;" value="{uEmail_email}">(X)</span>',
				'       </td>',
				'   </tr>',
				'</tpl>',
				'   <tr>',
				'       <td><input style="width:200px;margin-bottom:0;" class="x-form-field x-form-text" placeholder="Type additional email address" type="text" id="new_email_input" /></td>',
				'       <td></td>',
				'       <td></td>',
				'       <td>',
				'			<span id="addEmail" style="text-decoration:underline;cursor:pointer;">(+)</span>',
				'		</td>',
				'   </tr>',
				'</table>',
				{
					disableFormats: true,
					isChecked: function(value) {
						if (value === true) {
							return "checked";
						} else {
							return "";
						}
					}
				}
			);

		try {
			store = Ext.StoreMgr.lookup("emails");
			store.addListener('load', function(store, records) {
				var i,
					data = [];

				for (i = 0; i < records.length; i++) {
					data.push(records[i].data);
				}

				tpl.overwrite(component.el, data);

				//relayout the form to resize for the template
				controller.getForm().doLayout();

				Ext.select('.isPrimaryEmail').on('click', function(e) {
					//alert(Ext.get(this).getValue());
					if (Ext.get(this).getAttribute('checked') === 'checked') {
						return false;
					}


		// Why are we not using the Sencha confirm here???  It's not consistent with site design...
		// Ext.window.MessageBox.confirm()

					if ( confirm('Are you sure you want to make this email primary?') ) {
						LApp.setEmailPrimary(Ext.get(this).getValue(), store);
					}
				});

				//bind reverify email event
				Ext.select('.reverifyEmail').on('click', function(e) {
					LApp.verifyEmail(Ext.get(this).getAttribute('value'), store);
				});

				//bind delete event
				Ext.select('.deleteEmail').on('click', function(e) {


		// Why are we not using the Sencha confirm here???  It's not consistent with site design...
		// Ext.window.MessageBox.confirm()

					if ( confirm('Are you sure you want to delete this email?') ) {
						LApp.deleteEmail(Ext.get(this).getAttribute('value'), store);
					}
				});

				//bind add new email
				Ext.select('#addEmail').on('click', function(e) {
					var email = document.getElementById('new_email_input').value;

					if (!/\S+@\S+\.\S+/.test(email)) {
						alert('Email is invalid');
					} else {
						LApp.addEmail(email, store);
					}

				});
			});

		} catch (e) {
			//<debug>
			Ext.Error.raise("Error occurred while attempting to build email list. " + e);
			//</debug>
		}
	},

	verifyEmail: function(email) {
		var me = this;

		me.loading();

		Ext.Ajax.request({
			url: LApp.basePath + '/people/email/sendVerification',
			params: {
				email: email
			},
			success: function(response) {
				var message = Ext.JSON.decode(response.responseText);

				me.stopLoading();

				if(message.success === true){
					Alert('Information','Verification email has been successfully sent');
				}

				if(message.success === false){
					Alert("Settings Manager", msg.errors.join('<br>'));
				}
				// store.reload();
			},
			failure: function(){
				me.stopLoading();
				Alert('Settings Manager','Sorry, there is an error in connection');
			}
		});
	},

	createEmail: function(email) {
		var me = this;
		//	email = document.getElementById('new_email_input').value;

		if (!/\S+@\S+\.\S+/.test(email)) {

			Alert('Email is invalid');

		} else {

			me.loading();

			Ext.Ajax.request({
				url: LApp.basePath + '/people/email/create',
				params: {
					uEmail_email: email,
					uEmail_emailType: 1
				},
				success: function(response) {
					var obj = Ext.JSON.decode(response.responseText);
					me.stopLoading();

					if (obj.success === false) {
						Alert("Error", obj.errors.join('<br>'));
					}

					Ext.StoreMgr.lookup('emails').reload();
				},
				failure: function(){
					me.stopLoading();
					Alert('Settings Manager', 'Sorry, there is an error in connection');
				}
			});
		}
	},

	setEmailPrimary: function(email,el) {
		if (el.getAttribute('checked') !== 'checked') {

		// Why are we not using the Sencha confirm here???  It's not consistent with site design...
		// Ext.window.MessageBox.confirm()


			if ( confirm('Make this email your primary?') ) {
				var me = this;

				me.loading();

				Ext.Ajax.request({
					url: LApp.basePath + '/people/email/setPrimary',
					params: {
						email: email
					},
					success: function(response) {
						var obj = Ext.JSON.decode(response.responseText);

						me.stopLoading();

						if(obj.success === false){
							Alert("Error", obj.errors.join('<br>'));
						}

						Ext.StoreMgr.lookup('emails').reload();
					},
					failure:function(){
						me.stopLoading();
						Alert('Settings Manager', 'Sorry, there is an error in connection');
					}
				});
			}
		}

	},

	deleteEmail: function(email) {
		// Why are we not using the Sencha confirm here???  It's not consistent with site design...
		// Ext.window.MessageBox.confirm()

		var msg = confirm('Are you sure you want to delete this email?');

		if (msg) {
			this.loading();
			var me = this;
			Ext.Ajax.request({
				url: LApp.basePath + '/people/email/delete',
				params: {
					email: email
				},
				success: function(response) {
					var obj = Ext.JSON.decode(response.responseText);

					me.stopLoading();

					if(obj.success === false){
						Alert("Error", obj.errors.join('<br>'));
					}

					Ext.StoreMgr.lookup('emails').reload();
				},
				failure: function(){
					me.stopLoading();
					alert('Sorry, there is an error in connection');
				}
			});
		}
	},

	loading: function() {
		//Why are you not using the LoadMask feature of ExtJS? Look up el.mask("...") ?
		// http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.dom.Element-method-mask


		var xy = this.getEmailList().getXY(),
			height = this.getEmailList().getHeight(),
			width = this.getEmailList().getWidth(),
			dom = "<div class='loading' style='z-index:9999;position:absolute;left:"+xy[0]+"px;top:"+xy[1]+"px;width:"+width+"px;height:"+height+"px;'><img style='position:relative;left:"+width/2+"px;top:"+height/2+"px;' src='"+LApp.basePath+"/images/loading-animated.gif' /><div>";

		Ext.DomHelper.append(Ext.getBody(),dom);
	},

	stopLoading: function() {
		//if you use Ext.dom.Element.mask(), you could simply call the dom.unmask() function to remove load msg...

		Ext.select('div.loading').remove();
	}

});
