/*
 * File: envitz/controller/AdvancedSearch.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.controller.AdvancedSearch', {
	extend: 'Ext.app.Controller',

	refs: [
		{
			ref: 'form',
			selector: '#Form'
		},
		{
			ref: 'people',
			selector: '#people'
		},
		{
			ref: 'idea',
			selector: '#idea'
		},
		{
			ref: 'project',
			selector: '#project'
		},
		{
			ref: 'message',
			selector: '#message'
		},
		{
			ref: 'ideacomment',
			selector: '#idea-comment'
		},
		{
			ref: 'projectcomment',
			selector: '#project-comment'
		}
	],

	onBtnGoClick: function(button, e, eOpts) {
		var form = this.getForm().getForm();

		console.log(form.getValues());
		form.submit({
			standardSubmit:true,
			submitEmptyText:false,
			url:document.url
		});
	},

	onFormAfterRender: function(component, eOpts) {
		var form = this.getForm().getForm();

		form.setValues(LApp.formData);
		this.bindCheckbox(LApp.formData.type);
	},

	onTextfieldSpecialkey: function(field, e, eOpts) {
		var me = this,
			myKey = e.getKey();

		if(myKey == e.ENTER || myKey == e.RETURN){
			me.onBtnGoClick();
		}
	},

	bindCheckbox: function(values) {
		var me = this,
			message = this.getMessage(),
			ideaComment = this.getIdeacomment(),
			projectComment = this.getProjectcomment();

		if (values) {
			Ext.Array.each(values, function(name, index, countriesItSelf) {
				try{
					switch(name) {
						case 'people':
							me.getPeople().setValue(true);
							break;
						case 'idea':
							me.getIdea().setValue(true);
							break;
						case 'message':
							message.setValue(true);
							break;
						case 'project':
							me.getProject().setValue(true);
							break;
						case 'idea-comment':
							ideaComment.setValue(true);
							break;
						case 'project-comment':
							projectComment.setValue(true);
							break;
						case 'document-manager':
							//documentManager.setValue(true);
							break;
					}
				} catch(e) {
					if (Ext.isGecko) console.debug(e);
				}

			});
		}

		//disable message and comment search if the user is a guest
		if(LApp.isGuest === true){
			message.setValue(false);
			message.setDisabled(true);

			ideaComment.setValue(false);
			ideaComment.setDisabled(true);

			projectComment.setValue(false);
			projectComment.setDisabled(true);
		}
	},

	init: function(application) {
		this.control({
			"#btnGo": {
				click: this.onBtnGoClick
			},
			"#Form": {
				afterrender: this.onFormAfterRender
			},
			"#searchKeyword": {
				specialkey: this.onTextfieldSpecialkey
			}
		});
	}

});
