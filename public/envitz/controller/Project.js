/*
 * File: envitz/controller/Project.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.controller.Project', {
	extend: 'Ext.app.Controller',

	refs: [
		{
			ref: 'memCombo',
			selector: '#memComboProj'
		},
		{
			ref: 'form',
			selector: '#FormProj'
		},
		{
			ref: 'preview',
			selector: '#previewProj'
		},
		{
			ref: 'previewProjPanel',
			selector: '#previewProjPanel'
		},
		{
			ref: 'ideaRef',
			selector: '#ideaRefPanel'
		},
		{
			ref: 'project',
			selector: '#ProjectPanel'
		},
		{
			ref: 'memberGrid',
			selector: '#MemberGridProj'
		}
	],

	onBtnMemProjClick: function(button, e, eOpts) {
		var combo = this.getMemCombo(),
			store = Ext.StoreMgr.lookup('projectMember'),
			record, projMember;

		if (!store.findRecord('usr_id', combo.getValue())) {

			record = combo.findRecordByValue( combo.getValue() );
			projMember = new envitz.model.projMember(record.data);
			store.insert(0, projMember);
		}

	},

	onMemberItemProjClick: function(dataview, record, item, index, e, eOpts) {
		if (e.target.className === "delete") {
			dataview.getStore().removeAt(index);
		}

	},

	onBtnSubmitProjClick: function(button, e, eOpts) {
		var store = Ext.StoreMgr.lookup('projectMember'),
			data =[],
			remove=[],
			i,
			removedFields = store.getRemovedRecords(),
			modifields = store.getModifiedRecords();

		for (i = 0; i < modifields.length; i++) {
			data.push(modifields[i].data);
		}

		for (i = 0; i < removedFields.length; i++) {
			remove.push(removedFields[i].data);
		}

		// console.log(Ext.JSON.encode(data));return;
		this.getForm().getForm().submit({
			standardSubmit: true,
			submitEmptyText: false,
			url: document.URL,
			params: {
				members:Ext.JSON.encode(data),
				removed:Ext.JSON.encode(remove)
			}
		});
	},

	onFilefieldProjChange: function(filefield, value, eOpts) {
		var me = this,
			reader,
			file,
			filecontent;

		if (filefield.getEl().down('input[type="file"]').dom.files[0]) {
			reader = new FileReader();
			file = filefield.getEl().down('input[type="file"]').dom.files[0];
			filecontent = reader.readAsBinaryString(file);
			reader.onload = function(e) {
				me.getForm().down('#formImage').setSrc(e.target.result);
				me.getPreview().down('#previewImg').setSrc(e.target.result);
				reader.readAsDataURL(filefield.getEl().down('input[type="file"]').dom.files[0]);

			};
		}
	},

	onPreviewProjActivate: function(component, eOpts) {		
		var values = this.getForm().getForm().getValues(),
			preview = this.getPreview(),
			tpl,
			record,
			progress;

		preview.getForm().setValues(values);


		//display idea reference if any
		if(values.proj_srcIdea){
			tpl = new Ext.XTemplate(
				'<span style="font-size:large">Working on the following idea<span><BR><BR>',
				'<img src="{idea_img}" width="32" /> <span>{idea_title}</span>'
			);
			record = Ext.StoreMgr.lookup('idea').findRecord('idea_id',values.proj_srcIdea);
			tpl.overwrite(this.getIdeaRef().el,record.data);

		}


		//Add percentage sign to progress display
		progress = preview.down('#proj_progress');
		progress.setValue(progress.getValue() + '%');

	},

	onFormProjAfterRender: function(component, eOpts) {
		if (LApp.formData) {
			component.getForm().setValues(LApp.formData);
		}

	},

	onBtnCancelProjClick: function(button, e, eOpts) {
		//window.location = "/project";
		try {

			this.getForm().getForm().reset();		
			me = this;
			if (LApp.editMode) {
						
				setTimeout(function(){						
					me.getForm().getForm().setValues(LApp.formData);	
					me.getForm().down('#userImage').setSrc(LApp.imageSrc);
				}, 50);
			} else {
				setTimeout(function(){	
					me.getForm().down('#userImage').setSrc('/images/Project.svg');
				}, 50);
				
			}

		} catch(e) {
			
			console.log(e);
		}

	},

	onCloseProjectClick: function(button, e, eOpts) {
		var window = Ext.create('envitz.view.CloseProject',{
			proj_progress: LApp.formData.proj_progress,
			proj_id: this.getProject().proj_id
		});

		window.show();

	},

	onMemberProjGridSelect: function(rowmodel, record, index, eOpts) {
		var grid = this.getMemberGrid(),
			store = grid.getStore(),
			row = grid.getSelectionModel().getSelection()[0],
			index = store.indexOf(row),
			rec = new envitz.model.projMember({
				pMem_id: 0,
				pMem_memberID: 0,
				pMem_isPM: 0,
				pMem_isSponsor: 0,
				pMem_approvedState: 1,
				pMem_isOwner: 0,
				pMem_wallWrite: 1,
				pMem_docManagerAccess: 1,
				pMem_toolBoxAccess: 0
			});

		//console.log(store);
		//console.log(row);

		if (index === store.getCount() - 1) {
			store.add(rec);
		}
	},

	onMemberProjGridActivate: function(component, eOpts) {
		//add an empty row for project member
		var store = Ext.StoreMgr.lookup('projectMember'),
			rec = new envitz.model.projMember({
				pMem_id: 0,
				pMem_memberID: 0,
				pMem_isPM: 0,
				pMem_isSponsor: 0,
				pMem_approvedState: 1,
				pMem_isOwner: 0,
				pMem_wallWrite: 1,
				pMem_docManagerAccess: 1,
				pMem_toolBoxAccess: 0
			}),
			pm = new envitz.model.projMember({
				pMem_id: 0,
				pMem_memberID: LApp.user.id,
				pMem_isPM: 1,
				pMem_isSponsor: 0,
				pMem_approvedState: 1,
				pMem_isOwner: 0,
				pMem_wallWrite: 1,
				pMem_docManagerAccess: 1,
				pMem_toolBoxAccess: 1
			});

		if (store.getCount() < 1) {
			store.add(pm);
		}


		//add blank row to the member grid
		if (!store.findRecord('pMem_memberID', 0)) {
			store.add(rec);
		}
	},

	onGridpanelProjValidateedit: function(editor, editorInstance, eOpts) {
		var row,store = this.getMemberGrid().getStore();

		if (editorInstance.field == "pMem_memberID") {
			row = store.findRecord('pMem_memberID',editorInstance.value);

			if (editorInstance.record !== row && row && row.get('pMem_memberID') !== 0) {
				Alert('Project Manager', "This user is already a member.");
				editorInstance.cancel = true; // why are you not using e.preventDefault() ?
			}
		}
	},

	onBeforeEditMemberProjGrid: function(gridpanel,e, eOpts) {
		if (e.record.get('pMem_isPM') ===true){
			return false;
		}

	},

	init: function(application) {		
		this.control({
			"#btnAddMemProj": {
				click: this.onBtnMemProjClick
			},
			"#memberViewProj": {
				itemclick: this.onMemberItemProjClick
			},
			"#btnSubmitProj": {
				click: this.onBtnSubmitProjClick
			},
			"#myfileuploadProj": {
				change: this.onFilefieldProjChange
			},
			"#previewProjPanel": {
				activate: this.onPreviewProjActivate
			},
			"#FormProj": {
				afterrender: this.onFormProjAfterRender
			},
			"#btnCancelProj": {
				click: this.onBtnCancelProjClick
			},
			"#CloseProject": {
				click: this.onCloseProjectClick
			},
			"#MemberGridProj": {
				select: this.onMemberProjGridSelect,
				activate: this.onMemberProjGridActivate,
				validateedit: this.onGridpanelProjValidateedit,
				beforeedit: this.onBeforeEditMemberProjGrid
			}
		});
	}

});
