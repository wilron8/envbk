/*
 * File: envitz/controller/Registration.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.controller.Registration', {
	extend: 'Ext.app.Controller',

	models: [
		'simpleCombo'
	],
	stores: [
		'countries',
		'languages',
		'secretQA'
	],

	refs: [
		{
			ref: 'form',
			selector: '#registrationForm'
		},
		{
			ref: 'captcha',
			selector: '#captchaHolder'
		},
		{
			ref: 'preview',
			selector: '#preview'
		}
	],

	onJoinResetClick: function(button, e, eOpts) {
		//location.reload();
		//this.getRegistrationForm().getForm().reset();
		//console.log('testing');
		try {	
			this.getForm().getForm().reset();
		} catch(e) {			
			console.log(e);
		}
		
	},

	onPreviewFocus: function(component, eOpts) {
		var values = this.getForm().getForm().getValues(),
			preview = this.getPreview(),
			address = [],
			country,
			lang,
			phoneStore,
			phoneRecord;


		values.email = LApp.formData.email;
		preview.getForm().setValues(values);

		preview.down('#userFullName').setValue(this.getFullName(values.usr_fName, values.usr_mName, values.usr_lName));


		address.push(values.uAddr_city);
		address.push(values.uAddr_state);
		address.push(values.uAddr_ZIP);

		if (values.uAddr_country !== '') {
			country = Ext.StoreMgr.lookup('countries').findRecord('id', values.uAddr_country);
			address.push(country.get('geoCountry_name'));
		}

		preview.down('#userAddress3').setValue(address.join(' '));

		if (values.usr_lang !== '') {
			lang = Ext.StoreMgr.lookup('languages').findRecord('id', values.usr_lang);
			preview.down('#userLang').setValue(lang.get('geoLang_name'));
		}

		//display phone type
		phoneStore = Ext.StoreMgr.lookup("phoneType");
		phoneRecord = phoneStore.findRecord('id', preview.down("#phoneType").value);

		if (phoneRecord) {
			preview.down("#phoneType").setValue(phoneRecord.get('text'));
		}

	},

	onFormAfterRender: function(component, eOpts) {
		var recaptcha = Ext.create('ReCaptcha', {
			name: 'recaptcha',
			recaptchaId: 'recaptcha',
			publickey: LApp.captchaKey,
			itemId:'recaptchaWidget',
			theme: 'white',
			lang: 'en' // should this not match the user preference?
		});

		component.getForm().setValues(LApp.formData);

		this.getCaptcha().add(recaptcha);

		// bind terms of service click event

		component.getEl().on('click', function(e, t) {
			e.preventDefault();
			this.redirectURLclick(t);
		}, this, {
			delegate: '.term_of_service'
		});

	},

	onBtnSubmitRegClick: function(button, e, eOpts) {
		e.preventDefault();
		console.log(this.getForm());
		Ext.select('.statusmsg').remove();
		var frmValue = this.getForm().getForm().getValues();
		var captcha = this.getCaptcha().down('#recaptchaWidget');
		var currPassword = Ext.Crypto.Base64.encode(frmValue.password);
		var confirmPassword = Ext.Crypto.Base64.encode(frmValue.confirm_password);
		var btnClear = Ext.getCmp('btnResetRegistration');
		
		button.setDisabled(true);
		button.setText('Validating...');
		btnClear.setDisabled(true);

		Ext.Ajax.request({
			url: "/registration",
			method: 'POST',
			params: {					
					usr_fName : frmValue.usr_fName, 
					usr_mName : frmValue.usr_mName,
					usr_lName : frmValue.usr_lName,
					uAddr_address1 : frmValue.uAddr_address1,
					uAddr_address2 : frmValue.uAddr_address2,
					uAddr_city : frmValue.uAddr_city,
					uAddr_state : frmValue.uAddr_state,
					uAddr_ZIP : frmValue.uAddr_ZIP,
					uAddr_country : frmValue.uAddr_country,
					uPhon_type : frmValue.uPhon_type,
					uPhon_countryCode : frmValue.uPhon_countryCode,
					uPhon_areaCode : frmValue.uPhon_areaCode,
					uPhon_number : frmValue.uPhon_number,
					usr_lang : frmValue.usr_lang,
					usr_secretQ : frmValue.usr_secretQ,
					secretA : frmValue.secretA,
					agreement : frmValue.agreement,
					password : currPassword,
					confirm_password : confirmPassword,
					captchaChallenge : captcha.getChallenge(),
					captchaResponse : captcha.getResponse(),
					currkey : LApp.formData.currkey
			},			
			success: function (data) {

				var responseData = Ext.JSON.decode(data.responseText);
				var divPanelContainer = Ext.get('user-registration-panel');
				var body = Ext.getBody(); 
				//Prepend response text
				divPanelContainer.insertFirst({
			        tag  : 'div',
			        class: 'statusmsg',
			        html : responseData.status,
			    });			    
				
				//console.log(reply);
				//console.log('success');
				//console.log(responseData);
				//console.log(data);
				if (responseData.is_error) {
					button.setDisabled(false);
					button.setText('Join!');
					btnClear.setDisabled(false);
					Recaptcha.reload();
				} else {
					window.location.href = responseData.status;
				}				

				setTimeout(function(){
					Ext.select('#recaptcha_response_field').blur();
					body.scrollTo('top', 0);
				}, 500);
				
				
			},
			failure: function(o){				
				alert('Status', 'There was an error when trying to process data.');
				console.log(o);
				Recaptcha.reload();
			}
		});
	
		/*this.getForm().getForm().submit({
			submitEmptyText: false,
			method: "POST",
			params: {
				captchaChallenge:captcha.getChallenge(),
				captchaResponse:captcha.getResponse(),
				password:Ext.Crypto.Base64.encode(frmValue.password),
				confirm_password:Ext.Crypto.Base64.encode(frmValue.confirm_password)
			},
			standardSubmit: true
		});
		/*e.preventDefault();
		//password = Ext.Crypto.Base64.encode(password);
		var currPassword = Ext.Crypto.Base64.encode(values.password);
		var confirmPassword = Ext.Crypto.Base64.encode(values.confirm_password);
		var divPanelContainer = Ext.get('panel');
		console.log('Current Password: '+currPassword);
		console.log('Confirm Password: '+confirmPassword);
		//Ext.get('panel').createChild('<div>This is my text!</div>'); // append text
		//Prepend text
		divPanelContainer.insertFirst({
	        tag  : 'div',
	        html : 'Child inserted at node 0',
	    });

	    var body = Ext.getBody();// return the document body Element. 
	    //Ext.get('ext-gen1018');  // add id docBody to your HTML ie. <body id="docBody"> 
                                           // or use DomQuery to get the body tag

		//body.scrollTo('top', 0);

		/*var p1 = Ext.get('myElementId');

			body.animate({
			   duration: 100,
			    to: {
			        y: 100
			    }
			});*/
		
	},

	init: function(application) {
		this.control({
			"#btnResetRegistration": {
				click: this.onJoinResetClick
			},
			"#previewPanel": {
				activate: this.onPreviewFocus
			},
			"#registrationForm": {
				afterrender: this.onFormAfterRender
			},
			"#btnSubmitRegistration": {
				click: this.onBtnSubmitRegClick
			}
		});
	},

	redirectURLclick: function(target) {
		var win = null,
			sWidth = 950,
			sHeight = 500,
			Width = Ext.dom.AbstractElement.getViewportWidth(),
			Height = Ext.dom.AbstractElement.getViewportHeight();

		if (Width < sWidth) {
			sWidth=Width*0.9;
		} else { //wide screen?
			sWidth=Width*0.6;
		}//end if Width

		if (Height < sHeight) {
			sHeight=Height*0.9;
		} else { //wide screen?
			sWidth=Width*0.6;
		}//end if Height

		if (target) {
			win = Ext.widget('window', {
				title: 'Terms of Use',
				id: 'TOSwin',
				maximizable: true,
				modal: true,
				html: '<iframe id="TOSwinF" src="' + target.href + '" width="' + sWidth + '" height="' + sHeight + '" style="border:0"></iframe>',
				buttons: [{
					text: 'I have read and understood these terms...',
					handler: function() {
						this.up('window').close();
					}
				}]
			});
			win.show();
			e.preventDefault();
		}//end if target

	},

	reCenterWin: function(winID) {
		//recenter the TOS window if open
		try {

			var myWinID = Ext.getCmp(winID);
			if (myWinID) myWinID.center();

		} catch (e)
		{

		}

	},

	getFullName: function(fName, mName, lName) {
		return fName + ' ' + (mName !== '' ? mName + ' ' : '') + lName;

	}

});
