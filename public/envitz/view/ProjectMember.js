/*
 * File: envitz/view/ProjectMember.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.ProjectMember', {
	extend: 'Ext.grid.Panel',

	requires: [
		'Ext.form.field.ComboBox',
		'Ext.grid.column.CheckColumn',
		'Ext.form.field.Checkbox',
		'Ext.grid.View',
		'Ext.grid.column.Action',
		'Ext.grid.plugin.CellEditing',
		'Ext.selection.RowModel'
	],

	itemId: 'MemberGrid1',
	minHeight: 200,
	header: false,
	title: 'Members',
	store: 'projectMember',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			columns: [
				{
					xtype: 'gridcolumn',
					renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
						var row = Ext.StoreMgr.lookup('user').findRecord('usr_id',value);
						var name = row.get('usr_displayName');
						return "<img width='32' src='"+row.get('usr_icon')+"' /> "+(name==""?"(click to add)":name);
					},
					width: 150,
					dataIndex: 'pMem_memberID',
					text: 'Member',
					editor: {
						xtype: 'combobox',
						displayField: 'usr_displayName',
						queryMode: 'local',
						store: 'user',
						valueField: 'usr_id'
					}
				},
				{
					xtype: 'gridcolumn',
					renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
						try{
							var store = Ext.StoreMgr.lookup('approveStatus');
							if(value){
								return store.findRecord('id',value).get('text');
							}
							return "";
						}catch(e){

						}

					},
					dataIndex: 'pMem_ApprovedState',
					text: 'Status',
					editor: {
						xtype: 'combobox',
						store: 'approveStatus',
						valueField: 'id'
					}
				},
				{
					xtype: 'gridcolumn',
					renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
						try {
							if (!value)
							return;
							var store = Ext.StoreMgr.lookup('projectRole');
							return store.findRecord('pRole_id', value).get('pRole_title');
						} catch (e) {

						}
					},
					width: 120,
					dataIndex: 'pMem_role',
					text: 'Role',
					editor: {
						xtype: 'combobox',
						displayField: 'pRole_title',
						store: 'projectRole',
						valueField: 'pRole_id'
					}
				},
				{
					xtype: 'checkcolumn',
					dataIndex: 'pMem_isPM',
					text: 'Is PM',
					editor: {
						xtype: 'checkboxfield'
					}
				},
				{
					xtype: 'checkcolumn',
					dataIndex: 'pMem_isOwner',
					text: 'Is Owner',
					editor: {
						xtype: 'checkboxfield'
					}
				},
				{
					xtype: 'checkcolumn',
					dataIndex: 'pMem_isSponsor',
					text: 'Is Sponsor',
					editor: {
						xtype: 'checkboxfield'
					}
				},
				{
					xtype: 'checkcolumn',
					dataIndex: 'pMem_wallWrite',
					text: 'Write wall',
					editor: {
						xtype: 'checkboxfield'
					}
				},
				{
					xtype: 'checkcolumn',
					dataIndex: 'pMem_docManagerAccess',
					text: 'Access Doc',
					editor: {
						xtype: 'checkboxfield'
					}
				},
				{
					xtype: 'checkcolumn',
					itemId: 'mycheckcolumn5',
					dataIndex: 'pMem_toolBoxAccess',
					text: 'Access Toolbox',
					editor: {
						xtype: 'checkboxfield',
						itemId: 'mycheckbox11'
					}
				},
				{
					xtype: 'actioncolumn',
					width: 40,
					items: [
						{
							handler: function(view, rowIndex, colIndex, item, e, record, row) {
								view.getStore().removeAt(rowIndex);
							},
							altText: 'Remove',
							icon: '',
							iconCls: 'icon-delete'
						}
					]
				}
			],
			viewConfig: {
				border: true
			},
			plugins: [
				Ext.create('Ext.grid.plugin.CellEditing', {
					pluginId: 'edit',
					clicksToEdit: 1
				})
			],
			selModel: Ext.create('Ext.selection.RowModel', {

			})
		});

		me.callParent(arguments);
	}

});