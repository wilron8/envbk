/*
 * File: envitz/view/Message.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.Message', {
	extend: 'Ext.form.Panel',

	requires: [
		'envitz.view.BoxSelect',
		'Ext.Img',
		'Ext.form.Label',
		'Ext.form.field.ComboBox',
		'Ext.form.field.HtmlEditor',
		'Ext.button.Button',
		'Ext.ux.form.field.BoxSelect'
	],

	border: false,
	itemId: 'msgForm',
	padding: 10,
	bodyPadding: 10,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					itemId: 'subject',
					margin: '0 0 10 0',
					style: {
						borderBottom: '2px solid #5880B3'
					},
					layout: {
						type: 'hbox',
						align: 'stretch',
						padding: 10
					},
					items: [
						{
							xtype: 'textfield',
							flex: 1,
							fieldLabel: 'Label',
							hideLabel: true,
							name: 'msg_subject',
							allowBlank: false,
							emptyText: 'Type subject',
							vtype: 'NoTags'
						}
					]
				},
				{
					xtype: 'container',
					margin: '0 0 10 0',
					layout: {
						type: 'hbox',
						align: 'stretch'
					},
					items: [
						{
							xtype: 'container',
							itemId: 'mycontainer69',
							maxHeight: 40,
							width: 200,
							layout: {
								type: 'hbox',
								align: 'stretch'
							},
							items: [
								me.processSender_img({
									xtype: 'image',
									listeners: {
										el: {
											click: function(){
													window.open('/people/'+LApp.user.id,'_blank');
												}
										}
									},
									itemId: 'sender_img',
									maxWidth: 36,
									style: {
										cursor: 'pointer'
									},
									width: 36,
									src: 'no-image.png'
								}),
								me.processsenderName({
									xtype: 'label',
									flex: 1,
									padding: '12 0 0 5',
									text: '{senderName}'
								}),
								{
									xtype: 'image',
									height: 28,
									margin: '10 0 0 0',
									maxHeight: 28,
									src: '/images/arrow_right.png'
								}
							]
						},
						me.processRecipients({
							xtype: 'boxselect',
							listConfig: {
								tpl: [
									'<tpl for=".">',
									'<div role="option" class="x-boundlist-item" style="background-image:url({usr_icon}); background-repeat: no-repeat; background-size: 25px; padding-left: 30px;">{usr_displayName}</div>',
									'</tpl>'
								]
							},
							labelTpl: '<a href="{url}" target="_blank" ><img src=\"{usr_icon}\" style=\"height: 25px; vertical-align: middle; margin: 2px;\" /></a> {usr_displayName}',
							itemId: 'recipients',
							maxWidth: 400,
							width: 400,
							hideLabel: true,
							name: 'recipients[]',
							allowBlank: false,
							emptyText: 'Recipent(s)',
							displayField: 'usr_displayName',
							queryMode: 'local',
							store: 'user',
							valueField: 'usr_id'
						})
					]
				},
				{
					xtype: 'htmleditor',
					height: 150,
					itemId: 'msg_body',
					margin: '0 0 0 30',
					fieldLabel: 'Label',
					hideLabel: true,
					name: 'msg_body',
					enableSourceEdit: false
				},
				{
					xtype: 'container',
					margin: '10 0 0 30',
					items: [
						{
							xtype: 'button',
							formBind: true,
							itemId: 'btnSubmitMessage',
							width: 100,
							text: 'Send'
						},
						{
							xtype: 'button',
							itemId: 'btnCancelMessage',
							margin: '0 0 0 30',
							width: 75,
							text: 'Cancel'
						},
						{
							xtype: 'button',
							itemId: 'btnResetMessage',
							margin: '0 0 0 30',
							text: 'Reset'
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	processSender_img: function(config) {
		config.src = LApp.user.photo;
		return config;
	},

	processsenderName: function(config) {
		config.text = LApp.user.displayName;
		return config;
	},

	processRecipients: function(config) {
		var store = Ext.StoreMgr.lookup('user');

		//force this config to be set regardless of Architect overriding it!
		config.forceSelection = false;


		//bind only following/followed user
		store.getProxy().url = "/message/getRecipient";
		store.load();
		config.store=store;

		return config;
	}

});