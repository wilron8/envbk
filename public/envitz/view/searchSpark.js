/*
 * File: envitz/view/searchSpark.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.searchSpark', {
	extend: 'Ext.container.Container',
	alias: 'widget.searchspark',

	requires: [
		'Ext.form.Panel',
		'Ext.button.Button',
		'Ext.menu.Menu',
		'Ext.menu.CheckItem',
		'Ext.form.field.Text'
	],

	showOptions: false,
	textFieldWidth: 300,
	textFieldEmptyText: '',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'form',
					border: false,
					itemId: 'sparkFinder',
					layout: 'column',
					bodyStyle: {
						background: 'none'
					},
					items: [
						me.processSearchOptions({
							xtype: 'button',
							height: 30,
							hidden: true,
							arrowAlign: 'bottom',
							arrowCls: ' ',
							iconAlign: 'top',
							iconCls: 'icon-search-option',
							scale: 'medium',
							tooltip: 'Search_Options',
							menu: {
								xtype: 'menu',
								items: [
									{
										xtype: 'menucheckitem',
										disabled: true,
										hidden: true,
										id: 'sparkSearchALL',
										itemId: 'searchOptALL',
										text: 'All',
										listeners: {
											checkchange: {
												fn: me.sparkSearchCHKall,
												scope: me
											}
										}
									},
									{
										xtype: 'menucheckitem',
										disabled: true,
										hidden: true,
										id: 'sparkSearchMessage',
										itemId: 'searchOptMsg',
										text: 'My Messages',
										listeners: {
											checkchange: {
												fn: me.sparkSearchCHKmsg,
												scope: me
											}
										}
									},
									{
										xtype: 'menucheckitem',
										id: 'sparkSearchPeople',
										itemId: 'searchOptPpl',
										text: 'People',
										checked: true,
										listeners: {
											checkchange: {
												fn: me.sparkSearchCHKppl,
												scope: me
											}
										}
									},
									{
										xtype: 'menucheckitem',
										id: 'sparkSearchIdeas',
										itemId: 'searchOptIdea',
										text: 'Ideas',
										checked: true,
										listeners: {
											checkchange: {
												fn: me.sparkSearchCHKidea,
												scope: me
											}
										}
									},
									{
										xtype: 'menucheckitem',
										id: 'sparkSearchProjects',
										itemId: 'searchOptProj',
										text: 'Projects',
										checked: true,
										listeners: {
											checkchange: {
												fn: me.sparkSearchCHKprj,
												scope: me
											}
										}
									},
									{
										xtype: 'menuitem',
										handler: function(item, e) {
											document.location.href = '/find-advanced';
										},
										itemId: 'searchOptAdv',
										iconCls: 'icon-searchAdv',
										text: 'Advanced search'
									}
								]
							}
						}),
						me.processSearchString({
							xtype: 'textfield',
							height: 30,
							id: 'sparkSearch',
							maxWidth: 1000,
							minWidth: 200,
							style: {
								fontSize: '16px'
							},
							width: 300,
							fieldLabel: '',
							hideLabel: true,
							name: 'keyword',
							validateOnChange: false,
							emptyText: 'Find ideas, projects, and people.',
							enforceMaxLength: true,
							maxLength: 128,
							listeners: {
								keydown: {
									fn: me.onSparkSearch,
									buffer: 120,
									element: 'el',
									scope: me
								}
							}
						}),
						{
							xtype: 'button',
							handler: function(button, e) {
								Ext.getCmp("sparkSearch").reset();
							},
							height: 30,
							hidden: true,
							iconCls: 'icon-search-clear',
							scale: 'medium',
							tooltip: 'clear search'
						},
						{
							xtype: 'button',
							height: 30,
							iconCls: 'icon-search',
							scale: 'medium',
							tooltip: 'Find it!',
							listeners: {
								click: {
									fn: me.onSearchActionClick,
									scope: me
								}
							}
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	processSearchOptions: function(config) {
		config.hidden = !this.showOptions;

		return config;
	},

	processSearchString: function(config) {
		if (this.textFieldEmptyText !==''){
			config.emptyText = this.textFieldEmptyText;
		} else {
			if (!LApp.isGuest) {
				config.emptyText = "Find ideas, projects, people, and messages.";
			}
		}

		console.log("config.textFieldWidth: " + config.textFieldWidth);
		console.log("this.textFieldWidth: " + this.textFieldWidth);

		if (this.textFieldWidth !== 300){
			config.width = this.textFieldWidth;
		}

		return config;
	},

	sparkSearchCHKall: function(menucheckitem, checked, eOpts) {
		//console.log("Search All: " + checked);
		LApp.search = {
			msg : checked,
			ppl : checked,
			idea: checked,
			project:checked
		};

		//console.log(LApp.search);

		Ext.getCmp("navToolSearchMessage").setChecked(checked, false);
		Ext.getCmp("navToolSearchPeople").setChecked(checked, false);
		Ext.getCmp("navToolSearchIdeas").setChecked(checked, false);
		Ext.getCmp("navToolSearchProjects").setChecked(checked, false);
		//
	},

	sparkSearchCHKmsg: function(menucheckitem, checked, eOpts) {
		//console.log("Search message: " + checked);
		LApp.search.msg = checked;

		Ext.getCmp("navToolSearchALL").setChecked(false, true); //update value without event fire
	},

	sparkSearchCHKppl: function(menucheckitem, checked, eOpts) {
		//console.log("Search people: " + checked);
		LApp.search.ppl = checked;

		Ext.getCmp("navToolSearchALL").setChecked(false, true); //update value without event fire
	},

	sparkSearchCHKidea: function(menucheckitem, checked, eOpts) {
		//console.log("Search idea: " + checked);
		LApp.search.idea = checked;

		Ext.getCmp("navToolSearchALL").setChecked(false, true); //update value without event fire
	},

	sparkSearchCHKprj: function(menucheckitem, checked, eOpts) {
		//console.log("Search project: " + checked);
		LApp.search.project = checked;

		Ext.getCmp("navToolSearchALL").setChecked(false, true); //update value without event fire
	},

	onSparkSearch: function(textfield, e, eOpts) {
		switch (textfield.keyCode) {
			case Ext.EventObject.RETURN:
			case Ext.EventObject.ENTER:
			case Ext.EventObject.NUM_CENTER:
				//console.log("onNAVtoolSearch::keydown = Enter");
				this.sparkFind();
				break;
		}

	},

	onSearchActionClick: function(button, e, eOpts) {
		this.sparkFind();
	},

	sparkFind: function(config) {

		//TODO: refactor to use form.submit with POST data

		console.log("sparkFind().config: " + config);

		var sparkSearch = Ext.getCmp("sparkSearch");
		var searchStr = sparkSearch.getValue() || sparkSearch.getRawValue();
		var searchURL="/find-advanced?";

		if(searchStr.length > 1){
			//now encode the string for URL:
			searchStr = Ext.String.trim(searchStr);
			searchStr = Ext.String.escape(searchStr);
			//console.log(searchStr);

			//TODO: filter out string injectors:

			if(LApp.search.ppl && LApp.search.idea && LApp.search.project){

				document.location.href = '/find/' + searchStr;

			} else {

				if(LApp.search.msg && !LApp.isGuest) searchURL += "type[]=message&";
				if(LApp.search.ppl) searchURL += "type[]=people&";
				if(LApp.search.idea) searchURL += "type[]=idea&";
				if(LApp.search.ideaComment && !LApp.isGuest) searchURL += "type[]=idea-comment&";
				if(LApp.search.project) searchURL += "type[]=project&";
				if(LApp.search.projectComment && !LApp.isGuest) searchURL += "type[]=project-comment&";

				searchURL += "keyword=" + searchStr;
				document.location.href = searchURL;

			}
		}
	}

});