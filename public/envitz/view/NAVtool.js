/*
 * File: envitz/view/NAVtool.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.NAVtool', {
	extend: 'Ext.toolbar.Toolbar',
	alias: 'widget.navTool',

	requires: [
		'envitz.view.searchSpark',
		'Ext.button.Button',
		'Ext.menu.Menu',
		'Ext.menu.Item',
		'Ext.toolbar.Fill',
		'Ext.form.Panel',
		'Ext.form.field.Hidden',
		'Ext.form.field.Text',
		'Ext.form.field.Checkbox',
		'Ext.Crypto',
		'Ext.Crypto.Base64',
		'envitz.view.joinService',
		'envitz.view.ForgotPassword'
	],

	autoRender: true,
	maxWidth: 1280,
	minWidth: 800,
	renderTo: 'naviToolBar',
	anchorSize: 1,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			style: {
				backgroundColor: '#5880b3',
				background: '#5880b3'
			},
			items: [
				{
					xtype: 'button',
					handler: function(button, e) {
						//document.location.href = ( LApp.isGuest? '/' : '/feed');
						document.location.href = '/feed';
					},
					overCls: 'o',
					iconCls: 'icon-LI-LOGO',
					scale: 'large',
					tooltip: 'LINSPIRA'
				},
				{
					xtype: 'container',
					hidden: true,
					itemId: 'logoGap',
					minWidth: 60
				},
				{
					xtype: 'button',
					hidden: true,
					itemId: 'messages',
					arrowAlign: 'bottom',
					arrowCls: ' ',
					iconAlign: 'top',
					iconCls: 'icon-message',
					scale: 'large',
					tooltip: 'Messages',
					menu: {
						xtype: 'menu',
						items: [
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = '/message/';
								},
								iconCls: 'icon-message-show',
								text: 'Show Messages',
								listeners: {
									afterrender: {
										fn: me.navToolMessageCount,
										scope: me
									}
								}
							},
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = '/message/new';
								},
								iconCls: 'icon-message-new',
								text: 'New Message'
							}
						]
					},
					listeners: {
						mouseover: {
							fn: me.onMsgMseOver,
							scope: me
						},
						mouseout: {
							fn: me.onMsgMseOut,
							scope: me
						}
					}
				},
				{
					xtype: 'button',
					hidden: true,
					itemId: 'people',
					arrowAlign: 'bottom',
					arrowCls: 'v',
					iconAlign: 'top',
					iconCls: 'icon-people',
					scale: 'large',
					tooltip: {
						text: 'People ('+LApp.count.people.total+')'
					},
					menu: {
						xtype: 'menu',
						width: 120,
						items: [
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = (LApp.isGuest ? '/people/public' : '/people/following');

								},
								iconCls: 'icon-people-following',
								text: 'Following',
								listeners: {
									afterrender: {
										fn: me.onMenuitemAfterRender,
										scope: me
									}
								}
							},
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = (LApp.isGuest ? '/people/public' : '/people/follower');

								},
								iconCls: 'icon-people-follower',
								text: 'Followers',
								listeners: {
									afterrender: {
										fn: me.onMenuitemAfterRender1,
										scope: me
									}
								}
							}
						]
					},
					listeners: {
						mouseout: {
							fn: me.onPPLMseOut,
							scope: me
						},
						mouseover: {
							fn: me.onPPLMseOver,
							scope: me
						}
					}
				},
				{
					xtype: 'button',
					hidden: true,
					itemId: 'ideas',
					arrowAlign: 'bottom',
					arrowCls: ' ',
					iconAlign: 'top',
					iconCls: 'icon-ideas',
					scale: 'large',
					tooltip: 'Ideas',
					handler: function(item, e) {
								document.location.href = '/idea/all';
					},
					menu: {
						xtype: 'menu',
						itemId: 'ideaSubMenu',
						items: [
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = '/idea/all';
								},
								iconCls: 'icon-idea-show',
								text: 'Show ideas'
							},
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = '/idea/';
								},
								hidden: true,
								itemId: 'ideaSubShowMy',
								iconCls: 'icon-idea-user',
								text: 'Show my ideas',
								listeners: {
									afterrender: {
										fn: me.navToolIdeaCount,
										scope: me
									}
								}
							},
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = '/idea/new';
								},
								iconCls: 'icon-idea-new',
								text: 'New idea'
							}
						]
					},
					listeners: {
						mouseout: {
							fn: me.onIdeaMseOut,
							scope: me
						},
						mouseover: {
							fn: me.onIdeaMseOver,
							scope: me
						}
					}
				},
				{
					xtype: 'button',
					hidden: true,
					itemId: 'projects',
					arrowAlign: 'bottom',
					arrowCls: ' ',
					iconAlign: 'top',
					iconCls: 'icon-projects',
					scale: 'large',
					tooltip: 'Projects',
					handler: function(item, e) {
								document.location.href = '/project/all';
					},
					menu: {
						xtype: 'menu',
						itemId: 'projectSubMenu',
						items: [
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = '/project/all';
								},
								iconCls: 'icon-projects-show',
								text: 'Show projects'
							},
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = '/project/';
								},
								hidden: true,
								itemId: 'projectSubShowMy',
								iconCls: 'icon-projects-user',
								text: 'Show my projects',
								listeners: {
									afterrender: {
										fn: me.navToolProjectCount,
										scope: me
									}
								}
							},
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = '/project/new';
								},
								iconCls: 'icon-projects-new',
								text: 'New project'
							}
						]
					},
					listeners: {
						mouseout: {
							fn: me.onProjMseOut,
							scope: me
						},
						mouseover: {
							fn: me.onProjMseOver,
							scope: me
						}
					}
				},
				{
					xtype: 'container',
					minWidth: 50
				},
				{
					xtype: 'searchspark',
					showOptions: true
				},
				{
					xtype: 'tbfill'
				},
				{
					xtype: 'container',
					height: 30,
					html: '<a class="user_join" href="/join">Join</a>',
					itemId: 'linkJoin',
					margin: '0 0 0 5',
					style: {
						fontSize: '18px',
						display: 'inline-block',
						textAlign: 'center',
						verticalAlign: 'middle'
					},
					width: 50,
					listeners: {
						afterrender: {
							fn: me.captureLinkJoin,
							scope: me
						}
					}
				},
				{
					xtype: 'form',
					border: false,
					hidden: true,
					itemId: 'guestJoin',
					bodyStyle: {
						backgroundColor: '#5880b3',
						background: '#5880b3'
					},
					frameHeader: false,
					layout: {
						type: 'hbox',
						align: 'bottom'
					},
					items: [
						{
							xtype: 'hiddenfield',
							name: 'x'
						},
						{
							xtype: 'hiddenfield',
							name: 'y'
						},
						{
							xtype: 'textfield',
							height: 25,
							name: 'join_fName',
							allowBlank: false,
							emptyText: 'Your Name',
							minLength: 2
						},
						{
							xtype: 'textfield',
							height: 25,
							margin: '0 0 0 3',
							name: 'join_email',
							inputType: 'email',
							allowBlank: false,
							emptyText: 'email @',
							minLength: 4,
							vtype: 'email',
							vtypeText: 'Please use a valid email.'
						},
						{
							xtype: 'button',
							height: 30,
							margin: '0 15 0 5',
							width: 40,
							text: 'JOIN',
							listeners: {
								click: {
									fn: me.onJoinClick,
									scope: me
								}
							}
						}
					]
				},
				{
					xtype: 'container',
					height: 30,
					html: '<a class="user_login" href="#">Login</a>',
					itemId: 'linkLogin',
					margin: '0 0 0 5',
					style: {
						fontSize: '18px',
						display: 'inline-block',
						textAlign: 'center',
						verticalAlign: 'middle'
					},
					width: 50,
					listeners: {
						afterrender: {
							fn: me.captureLinkLogin,
							scope: me
						}
					}
				},
				{
					xtype: 'form',
					border: false,
					hidden: true,
					itemId: 'guestLogin',
					resizable: false,
					bodyStyle: {
						backgroundColor: '#5880b3',
						background: '#5880b3'
					},
					frameHeader: false,
					layout: {
						type: 'hbox',
						align: 'bottom'
					},
					items: [
						{
							xtype: 'hiddenfield',
							name: 'xDPI'
						},
						{
							xtype: 'hiddenfield',
							name: 'yDPI'
						},
						{
							xtype: 'textfield',
							height: 25,
							itemId: 'navToolUser',
							margin: '0 0 0 15',
							width: 150,
							name: 'usr_username',
							inputType: 'email',
							emptyText: 'Username (Email)',
							maskRe: /^[a-zA-Z0-9@.]/,
							vtype: 'email',
							listeners: {
								keydown: {
									fn: me.onNavToolUserKeydown,
									scope: me
								}
							}
						},
						{
							xtype: 'textfield',
							height: 25,
							itemId: 'navToolPass',
							margin: '0 0 0 3',
							width: 150,
							name: 'usr_password',
							inputType: 'password',
							emptyText: 'Password',
							listeners: {
								keydown: {
									fn: me.onNavToolPassKeydown,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							height: 30,
							itemId: 'navToolLogin',
							margin: '0 0 0 5',
							width: 40,
							text: 'Login',
							listeners: {
								click: {
									fn: me.onNavToolLogin,
									scope: me
								}
							}
						},
						{
							xtype: 'container',
							flex: 1,
							layout: {
								type: 'vbox',
								align: 'stretch'
							},
							items: [
								{
									xtype: 'checkboxfield',
									margin: '0 10 0 10',
									style: {
										color: 'white'
									},
									labelSeparator: '?',
									name: 'rememberme',
									boxLabel: 'Remember'
								},
								{
									xtype: 'container',
									html: '<a class="forgot_password" href="/forgot">Forgot password?</a>',
									margin: '0 0 0 5',
									width: 110,
									listeners: {
										afterrender: {
											fn: me.captureLinkForgot,
											scope: me
										}
									}
								}
							]
						}
					]
				},
				{
					xtype: 'button',
					hidden: true,
					id: 'navToolMenuUser',
					itemId: 'userProfile',
					resizable: false,
					arrowCls: ' ',
					iconCls: 'userAvatar',
					menuAlign: 'tr-br?',
					scale: 'large',
					text: 'User Menu',
					menu: {
						xtype: 'menu',
						items: [
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = '/help';
								},
								iconCls: 'icon-help',
								text: 'HELP'
							},
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = '/people/' + LApp.user.id;
								},
								iconCls: 'userAvatar-profile',
								text: 'Profile'
							},
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = '/settings';
								},
								iconCls: 'userAvatar-settings',
								text: 'Settings'
							},
							{
								xtype: 'menuitem',
								hidden: true,
								text: 'Security',
								menu: {
									xtype: 'menu',
									width: 120,
									items: [
										{
											xtype: 'menuitem',
											text: 'Password'
										},
										{
											xtype: 'menuitem',
											text: 'Security Q & A'
										},
										{
											xtype: 'menuitem',
											hidden: true,
											text: 'Access History'
										}
									]
								}
							},
							{
								xtype: 'menuitem',
								handler: function(item, e) {
									document.location.href = '/logout';
								},
								iconCls: 'icon-logout',
								text: 'Logout'
							}
						]
					},
					listeners: {
						afterrender: {
							fn: me.navToolUserMenu,
							scope: me
						},
						mouseout: {
							fn: me.onUserMseOut,
							scope: me
						},
						mouseover: {
							fn: me.onUserMseOver,
							scope: me
						}
					}
				}
			],
			listeners: {
				afterrender: {
					fn: me.onToolbarAfterRender,
					scope: me
				}
			}
		});

		me.callParent(arguments);
	},

	navToolMessageCount: function(component, eOpts) {
		//console.log(component);
		if ( LApp.count.messages > 0 ) {
			component.setText("Show Messages (" + LApp.count.messages + ")");
		}
	},

	onMsgMseOver: function(button, e, eOpts) {
		if (!button.hasVisibleMenu()) {
			button.showMenu();
		}
	},

	onMsgMseOut: function(button, e, eOpts) {
		if (button.hasVisibleMenu()) {
			//button.hideMenu();
		}
	},

	onMenuitemAfterRender: function(component, eOpts) {
		//console.log(component);
		if ( LApp.count.people.following > 0 ) {
			component.setText("Following (" + LApp.count.people.following + ")");
		}
	},

	onMenuitemAfterRender1: function(component, eOpts) {
		//console.log(component);
		if ( LApp.count.people.follower > 0 ) {
			component.setText("Follower (" + LApp.count.people.follower + ")");
		}
	},

	onPPLMseOut: function(button, e, eOpts) {
		if (button.hasVisibleMenu()) {
			//button.hideMenu();
		}
	},

	onPPLMseOver: function(button, e, eOpts) {
		if (!button.hasVisibleMenu()) {
			button.showMenu();
		}
	},

	navToolIdeaCount: function(component, eOpts) {
		//console.log(component);
		if( LApp.count.ideas > 0 ){
			component.setText("My ideas (" + LApp.count.ideas + ")");
		}
	},

	onIdeaMseOut: function(button, e, eOpts) {
		if (button.hasVisibleMenu()) {
			//button.hideMenu();
		}
	},

	onIdeaMseOver: function(button, e, eOpts) {
		if (!button.hasVisibleMenu()) {
			button.showMenu();
		}
	},

	navToolProjectCount: function(component, eOpts) {
		//console.log(component);
		if( LApp.count.projects > 0 ){
			component.setText("My projects (" + LApp.count.projects + ")");
		}
	},

	onProjMseOut: function(button, e, eOpts) {
		if (button.hasVisibleMenu()) {
			//button.hideMenu();
		}
	},

	onProjMseOver: function(button, e, eOpts) {
		if (!button.hasVisibleMenu()) {
			button.showMenu();
		}
	},

	captureLinkJoin: function(component, eOpts) {
		// bind terms of service click event

		component.getEl().on('click', function(e, t) {
			e.preventDefault();

			this.showJoin();
			this.hideLogin();

		}, this, {
			delegate: '.user_join'
		});
	},

	onJoinClick: function(button, e, eOpts) {
		var me = this, userName, eMail,
			thisForm = this.down("#guestJoin");

		userName = thisForm.down("[name=join_fName]");
		eMail = thisForm.down("[name=join_email]");

		if (userName.getValue().length > 2 && eMail.getValue().length > 4) {

			button.setText("...");
			button.setDisabled(true);

			thisForm.mask("Sending...");

			thisForm.submit({
				standardSubmit: false,
				submitEmptyText: false,
				url: LApp.guestJoin,
				success: function (form, response) {
					thisForm.unmask();

					button.setText("JOIN");
					button.setDisabled(false);

					userName.reset();
					eMail.reset();

					//console.log(response);
					//console.log(response.result);
					Alert("Join Request - Success", response.result.msg);

				},
				failure: function () {
					Alert("Join Request - Error", "There is an error in connection");
					button.setText("JOIN");
					button.setDisabled(false);
					thisForm.unmask();
				}
			});
		}
	},

	captureLinkLogin: function(component, eOpts) {
		// bind terms of service click event

		component.getEl().on('click', function(e, t) {
			e.preventDefault();

			this.showLogin();
			this.hideJoin();
		}, this, {
			delegate: '.user_login'
		});
	},

	onNavToolUserKeydown: function(textfield, e, eOpts) {
		switch (textfield.keyCode) {
			case Ext.EventObject.RETURN:
			case Ext.EventObject.ENTER:
			case Ext.EventObject.NUM_CENTER:
				//console.log("onGuestLogin::keydown = Enter");
				this.guestLogin(button, e, eOpts);
				break;
		}

	},

	onNavToolPassKeydown: function(textfield, e, eOpts) {
		switch (textfield.keyCode) {
			case Ext.EventObject.RETURN:
			case Ext.EventObject.ENTER:
			case Ext.EventObject.NUM_CENTER:
				//console.log("onGuestLogin::keydown = Enter");
				this.guestLogin(button, e, eOpts);
				break;
		}

	},

	onNavToolLogin: function(button, e, eOpts) {
		this.guestLogin(button, e, eOpts);
	},

	captureLinkForgot: function(component, eOpts) {
		// bind terms of service click event

		component.getEl().on('click', function(e, t) {
			e.preventDefault();

			this.showForgotPass();
		}, this, {
			delegate: '.forgot_password'
		});
	},

	navToolUserMenu: function(component, eOpts) {
		//console.log(component);

		if(!LApp.isGuest) {

			// set user's display name:
			component.setText( LApp.user.displayName );


			// ** only set avatar if user has uploaded an icon ** //
			if (LApp.user.photo !== false) {
				if ( Ext.util.CSS.updateRule(".userAvatar", "background-image", "url(\"" + LApp.user.photo + "\")")) {
					// do not use "!important" in the updated CSS rule as it will prevent this change.
					Ext.util.CSS.refreshCache(true); // force CSS update
				}
			}
		}

	},

	onUserMseOut: function(button, e, eOpts) {
		if(button.hasVisibleMenu()){
			//button.hideMenu();
		}
	},

	onUserMseOver: function(button, e, eOpts) {
		if(!button.hasVisibleMenu()){
			button.showMenu();
		}
	},

	onToolbarAfterRender: function(component, eOpts) {
		//console.log(component);

		if (!LApp.isGuest) {

			/*
				Setup the menu for signed-in user
			*/


			component.down("#logoGap").setVisible(true);

			//Make Messages menu available to Linspira user
			component.down("#messages").setVisible(true);

			//Make Messages menu available to Linspira user
			component.down("#people").setVisible(true);


			//Make idea submenu available to Linspira user
			//component.down("#ideaSubMenu").setVisible(true);
			component.down("#ideas").setVisible(true);
			component.down("#ideaSubShowMy").setVisible(true);


			//Make project submenu available to Linspira user
			//component.down("#projectSubMenu").setVisible(true);
			component.down("#projects").setVisible(true);
			component.down("#projectSubShowMy").setVisible(true);


			//Make user menu available since user is NOT a guest
			component.down("#userProfile").setVisible(true);


			//setup the search menu
			component.down("#searchOptALL").enable();
			component.down("#searchOptALL").setVisible(true);
			component.down("#searchOptALL").setChecked(true, true);

			component.down("#searchOptMsg").enable();
			component.down("#searchOptMsg").setVisible(true);
			component.down("#searchOptMsg").setChecked(true, true);

			component.down("#searchOptPpl").enable();
			component.down("#searchOptPpl").setVisible(true);
			component.down("#searchOptPpl").setChecked(true, true);


			//disable the login & join forms
			component.down("#guestJoin").setVisible(false);
			component.down("#linkJoin").setVisible(false);

			component.down("#guestLogin").setVisible(false);
			component.down("#linkLogin").setVisible(false);

		} else {
			/*
				Update the login form
			*/

			component.down("#ideaSubMenu").setVisible(false);
			component.down("#projectSubMenu").setVisible(false);

			//update join form screen info
			component.down("[name=x]").setValue(LApp.width);
			component.down("[name=y]").setValue(LApp.height);

			//update login form screen info
			component.down("[name=xDPI]").setValue(LApp.width);
			component.down("[name=yDPI]").setValue(LApp.height);

			if (document.location.pathname === "/registration") {
				// disable the login & join forms
				component.down("#linkJoin").setVisible(false);
				component.down("#linkLogin").setVisible(false);
			}

		}

	},

	redirectURLclick: function(target) {
		var forgotWin, joinWin;

		//console.log(target);

		switch (target) {
			case '<a class="forgot_password" href="/forgot">':
				forgotWin = Ext.create("envitz.view.ForgotPassword");
				forgotWin.show();
				break;

			case '<a class="user_join" href="/join">':
				joinWin = Ext.create("envitz.view.joinService");
				joinWin.show();
				break;

		}//end if target

	},

	showLogin: function() {
		var me = this;

		me.down("#linkLogin").setVisible(false);
		me.down("#guestLogin").setVisible(true);

	},

	hideLogin: function() {
		var me = this;

		me.down("#linkLogin").setVisible(true);
		me.down("#guestLogin").setVisible(false);

	},

	showJoin: function() {
		var me = this;

		me.down("#linkJoin").setVisible(false);
		me.down("#guestJoin").setVisible(true);

	},

	hideJoin: function() {
		var me = this;

		me.down("#linkJoin").setVisible(true);
		me.down("#guestJoin").setVisible(false);

	},

	showForgotPass: function() {
		var forgotWin = Ext.create("envitz.view.ForgotPassword");

		forgotWin.show();
	},

	guestLogin: function(button, e, eOpts) {
		var userName,
			userPass,
			form = button.up("#guestLogin");

		userName = form.down("#navToolUser").getValue();
		userPass = form.down("#navToolPass").getValue();

		if (userName.length > 3 && userPass.length > 3) {

			//button.setText("...");
			//button.setDisabled(true);

			form.mask("Authenticating...");

			console.log(form);

			form.submit({
				standardSubmit: true,
				submitEmptyText: false,
				url: LApp.guestLogin
			});
		}
	}

});