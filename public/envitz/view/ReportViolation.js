/*
 * File: envitz/view/ReportViolation.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.ReportViolation', {
	extend: 'Ext.window.Window',

	requires: [
		'Ext.container.Container',
		'Ext.form.field.TextArea',
		'Ext.button.Button'
	],

	height: 400,
	width: 430,
	layout: 'fit',
	title: 'Violation Report',
	titleAlign: 'center',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					padding: 20,
					style: {
						backgroundColor: '#fff'
					},
					defaults: {
						labelWidth: '75 px'
					},
					items: [
						{
							xtype: 'container',
							html: '<i>Found something wrong?</i><BR>Send us a report and we will take a look at it. If we find that it violates our terms of service, then we will remove it.',
							margin: '0 0 15 0'
						},
						me.processText({
							xtype: 'textareafield',
							border: 0,
							itemId: 'text',
							width: 375,
							fieldLabel: 'Comment',
							submitValue: false,
							validateOnChange: false,
							value: '{comment}',
							fieldStyle: 'border: 0',
							readOnly: true
						}),
						me.processCommenter({
							xtype: 'container',
							height: 40,
							html: '{User_postTime}',
							style: {
								textAlign: 'left'
							}
						}),
						{
							xtype: 'textareafield',
							height: 102,
							itemId: 'reason',
							maxWidth: 400,
							width: 375,
							fieldLabel: 'Reason',
							allowBlank: false,
							blankText: 'Please provide your reason.',
							emptyText: 'Offensive, illegal, or SPAM ?',
							validateBlank: true
						},
						{
							xtype: 'container',
							margin: '15 0',
							style: {
								textAlign: 'center'
							},
							layout: 'anchor',
							items: [
								me.processSendReport({
									xtype: 'button',
									handler: function(button, e) {
										var me = this,
											comment = me.down('#reason'),
											btnSend = me.down('#sendReport'),
											AjaxParams = {
												vp_comments: Ext.String.htmlEncode(comment.getValue())
											};

										if (me.ideaDesc === true) {
											AjaxParams.vp_ideaId = LApp.thisPage.mainID;
										} else if (me.projectDesc === true) {
											AjaxParams.vp_projID = LApp.thisPage.mainID;
										} else if (me.prjWDesc === true) {
											AjaxParams.vp_prjwId = me.prjW_id;
										} else {
											AjaxParams.vp_commentId = me.commentId;
										}

										//console.log(me);

										if (comment.getValue().length > 3) {
											btnSend.setText("Sending...");
											btnSend.setDisabled(true); //allow only one click while we wait for server reply.

											Ext.Ajax.request({ //TODO: base URL should be passed via process config
												url: me.URL,
												params: AjaxParams,
												success: function (response) {
													var obj = Ext.JSON.decode(response.responseText);

													if (obj.success === true) {
														me.close();
														Msg('Violation Report', 'The report has been successfuly submitted.');
													} else {
														Alert('Error', 'There was a technical problem reporting this comment.');
														btnSend.setDisabled(false);
														btnSend.setText("Send Report");

													}
												},
												failure: function() {
													Alert('Error', 'Network Operation Timed-out. Your connection to the server was lost. Please check your Internet connection and try again later.');
													btnSend.setDisabled(false);
													btnSend.setText("Send Report");

												}
											});


										} else {
											Alert("Missing Information", "Please let us know your reason.");
										}

									},
									itemId: 'sendReport',
									margin: '0 30 0 0 ',
									width: 100,
									text: 'Send Report'
								}),
								me.processCancel({
									xtype: 'button',
									handler: function(button, e) {
										this.close();
									},
									width: 75,
									text: 'Cancel'
								})
							]
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	processText: function(config) {
		var comment = "";

		if (this.selector) {
			comment = Ext.get(this.selector).down("[class=body]").el.getHTML();
		} else if (this.ideaDesc===true) {
			try{
				config.fieldLabel = "IDEA";
				comment = Ext.get("ideaDesc").getHTML();
			}catch(e){Ext.Error.raise(' Violation Report failure\n' + e.description);}
		}else if (this.projectDesc === true) {
				config.fieldLabel = "PROJECT";
				comment = Ext.get("projectDesc").getHTML();
		}
		comment = Ext.util.Format.stripTags(comment);

		config.value = Ext.util.Format.trim(comment);
		return config;
	},

	processCommenter: function(config) {
		var commenter, timeStamp;

		if (this.selector) {
			commenter = Ext.get(this.selector).down("[class=commenter]").el.getHTML();
			timeStamp = Ext.get(this.selector).down("[class=time]").el.getHTML();
		} else if (this.ideaDesc) {
			try{
				commenter = Ext.get("ideaOriginator").getHTML();
				timeStamp = Ext.get("ideaDT").getHTML();
			}catch(e){Ext.Error.raise(' Violation Report failure\n' + e.description);}
		}else if (this.projectDesc) {
			try{
				commenter = Ext.get("projectStarter").getHTML();
				timeStamp = Ext.get("projectTime").getHTML();
			}catch(e){Ext.Error.raise(' Violation Report failure\n' + e.description);}
		}

		commenter = Ext.util.Format.stripTags(commenter);
		timeStamp = Ext.util.Format.trim(timeStamp);

		config.html = Ext.util.Format.trim(commenter)+ ' ' + timeStamp;
		return config;
	},

	processSendReport: function(config) {
		config.scope = this;
		return config;
	},

	processCancel: function(config) {
		config.scope = this;
		return config;
	}

});