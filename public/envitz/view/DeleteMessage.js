/*
 * File: envitz/view/DeleteMessage.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.DeleteMessage', {
	extend: 'Ext.window.Window',

	requires: [
		'Ext.container.Container',
		'Ext.form.field.TextArea',
		'Ext.button.Button'
	],

	recordID: 0,
	height: 300,
	width: 430,
	layout: 'fit',
	title: 'Message Management',
	titleAlign: 'center',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					padding: 20,
					style: {
						backgroundColor: '#fff'
					},
					defaults: {
						labelWidth: '75 px'
					},
					items: [
						me.processText2Remove({
							xtype: 'textareafield',
							width: 375,
							fieldLabel: 'Message',
							labelAlign: 'top',
							value: '{postMsg}',
							fieldStyle: 'border: 0',
							readOnly: true
						}),
						me.processSender({
							xtype: 'container',
							height: 40,
							html: '{User_PostTime}',
							style: {
								textAlign: 'left'
							}
						}),
						{
							xtype: 'container',
							height: 30,
							html: '<div style=\'color:red;\'>--- WARNING ---<BR>Message will be permanently inaccessible...</div>',
							margin: '20 0 0 0',
							style: {
								textAlign: 'center'
							}
						},
						{
							xtype: 'container',
							margin: '15 0',
							style: {
								textAlign: 'center'
							},
							layout: 'anchor',
							items: [
								me.processRemove({
									xtype: 'button',
									handler: function(button, e) {
										var me = this;

										button.setText("Sending...");
										button.setDisabled(true); //allow only one click while we wait for server reply.

										Ext.Ajax.request({ //TODO: base URL should be passed via process config
											url: me.URL,
											success: function (response) {
												var svrMsg = Ext.JSON.decode(response.responseText);

												if (svrMsg.success === true) {
													//we only close if no error, otherwise give user a chance to retry...
													me.close();
													//remove HTML DIV/SPAN from DOM;
													Ext.get('record' + me.recordID ).remove();
												} else {
													button.setDisabled(false);
													button.setText("Remove");
													Alert('Message Manager', 'There was a technical problem in removing this message.');
												}
											},
											failure: function() {
												button.setDisabled(false);
												button.setText("Remove");
												Alert('Error','Sorry, there is an error in connection');
											}

										});

									},
									margin: '0 30 0 0',
									width: 75,
									text: 'Remove'
								}),
								me.processCancel({
									xtype: 'button',
									handler: function(button, e) {
										this.close();
									},
									width: 75,
									text: 'Cancel'
								})
							]
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	processText2Remove: function(config) {
		config.value = this.message;
		return config;
	},

	processSender: function(config) {
		config.html = this.sender + " posted at " + this.timeStamp;
		return config;
	},

	processRemove: function(config) {
		var me = this;
		config.scope = me;

		//handle custom property vars:
		config.recordID = me.recordID;
		config.recordTable = me.recordTable;
		config.URL = me.URL;

		return config;
	},

	processCancel: function(config) {
		config.scope = this;
		return config;
	}

});