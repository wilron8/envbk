/*
 * File: envitz/view/ProjectMenu.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.ProjectMenu', {
	extend: 'Ext.button.Button',

	requires: [
		'Ext.menu.Menu',
		'Ext.menu.Item',
		'envitz.view.CloseProject'
	],

	arrowAlign: 'bottom',
	arrowCls: '  ',
	iconAlign: 'top',
	iconCls: 'icon-dropdown',
	menuAlign: 'tr-br?',
	scale: 'large',
	text: '',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			menu: {
				xtype: 'menu',
				width: 160,
				items: [
					me.processUpdate({
						xtype: 'menuitem',
						text: 'Update'
					}),
					me.processRemove({
						xtype: 'menuitem',
						text: 'Remove'
					}),
					me.processJoin({
						xtype: 'menuitem',
						width: 120,
						text: 'Join',
						id: 'btnjoinproj',
						disabled: true
					}),
					me.processReportviolation({
						xtype: 'menuitem',
						handler: function(item, e) {
							var me = this,
								ideaWindow = Ext.create('envitz.view.ReportViolation', {
									projectDesc: true,
									URL: LApp.basePath + '/project/reportProject/' + LApp.thisPage.mainID
								});

							ideaWindow.show();
						},
						text: 'Report violation'
					}),
					me.processClose({
						xtype: 'menuitem',
						text: 'Close'
					})
				]
			},
			listeners: {
				mouseout: {
					fn: me.onButtonMouseOut,
					scope: me
				},
				mouseover: {
					fn: me.onButtonMouseOver,
					scope: me
				}
			}
		});

		me.callParent(arguments);
	},

	processUpdate: function(config) {
		if (LApp.projectMenu.update) {
			config.handler = function (item, e) {
					window.location = LApp.projectMenu.update.url;
			};

		}else{
			config.hidden=true;
		}

		return config;
	},

	processRemove: function(config) {
		if (!LApp.projectMenu.remove) {
			config.hidden = true;
		}

		config.handler = this.removeHandler;
		config.scope = this;
		return config;
	},

	processJoin: function(config) {
		if (LApp.projectMenu.join) {
			config.handler = this.joinHandler;
		} else {
			config.hidden = true;
		}

		return config;
	},

	processReportviolation: function(config) {
		if(!LApp.projectMenu.report){
			config.hidden=true;
		}
		config.scope = this;
		return config;
	},

	processClose: function(config) {
		if (!LApp.projectMenu.close) {
			config.hidden = true;
		} else {
			config.handler = this.closeHandler;
		}

		return config;
	},

	onButtonMouseOut: function(button, e, eOpts) {
		if (button.hasVisibleMenu()) {
			//button.hideMenu();
		}
	},

	onButtonMouseOver: function(button, e, eOpts) {
		if (!button.hasVisibleMenu()) {
			button.showMenu();
			var btnJoinProj = Ext.getCmp('btnjoinproj');
			if(LApp.projectMenu.join){
				var memStatus = LApp.projectMenu.join.imo;
				if(memStatus){
					btnJoinProj.setDisabled(false);
					console.log('enabled');
				} else {
					btnJoinProj.setDisabled(true);
					console.log('disabled');
				}
			}
		}
	},

	removeProject: function() {
		var me = this;

		Ext.Ajax.request({
			url: LApp.basePath+'/project/remove/'+me.proj_id,
			success: function (response) {
				var obj = Ext.JSON.decode(response.responseText);

				if (obj.success === true) {
					Ext.Msg.alert('Information','The project has been successfuly removed.', function () {
						window.location = "/project";
					});
				} else {
					Ext.Msg.alert('There is a problem removing this project.');
				}

			},
			failure: function(){
				Alert('Error','Sorry, there is an error in connection');
			}

		});

	},

	reportProject: function(comment) {
		var me = this;

		Ext.Ajax.request({
			url: LApp.basePath + '/project/reportProject/' + me.projectId,
			params: {
				vp_projID: me.projectId,
				vp_comments: comment
			},
			success: function (response) {
				var obj = Ext.JSON.decode(response.responseText);

				if (obj.success === true) {
					Ext.Msg.alert('Information', 'The project has been successfuly reported.');
				} else {
					Ext.Msg.alert('Error', 'There is a problem reporting this project.');
				}
			},
			failure: function () {
				Alert('Error', 'Sorry, there is an error in connection');
			}

		});
	},

	removeHandler: function(item, e) {
		var me = this;

		Ext.Msg.show({
			title: 'Project Management',
			msg: me.hideAlert + '<BR><BR>' + me.projectInformation + "<BR>" + me.projectCreator + "<BR><BR>"+me.hideWarning+ "<BR><BR>",
			minWidth: 400,
			minHeight: 200,
			modal: false,
			icon: Ext.MessageBox.QUESTION,
			buttons: Ext.Msg.YESNO,
			fn: function (btn) {
				if (btn === 'yes'){
					me.removeProject();
				}
			}
		});

	},

	reportHandler: function(item, e) {

	},

	closeHandler: function(item, e) {
		var window = Ext.create('envitz.view.CloseProject',{
			proj_id: this.proj_id,
			proj_progress: this.proj_progress
		});

		window.show();
	},

	joinHandler: function() {
		Ext.Ajax.request({
			url: LApp.projectMenu.join.url,
			success: function(response){
				var obj = Ext.JSON.decode(response.responseText);
				Ext.Msg.alert('Notification', obj.msg);
			},
			failure: function () {
				Alert('Error', 'Network Operation Timed-out. Your connection to the server was lost. Please check your Internet connection and try again later.');
			}
		});
	}

});