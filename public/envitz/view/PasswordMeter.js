/*
 * File: envitz/view/PasswordMeter.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.PasswordMeter', {
	extend: 'Ext.container.Container',
	alias: 'widget.passwordMeter',

	requires: [
		'Ext.container.Container',
		'Ext.form.field.Text',
		'Ext.form.Label',
		'Ext.Img',
		'Ext.chart.Chart',
		'Ext.chart.axis.Numeric',
		'Ext.chart.series.Column'
	],

	itemId: 'Passwords',

	layout: {
		type: 'hbox',
		align: 'stretch'
	},

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					maxWidth: 300,
					items: [
						{
							xtype: 'textfield',
							itemId: 'joinPassword',
							maxWidth: 290,
							style: {
								background: ''
							},
							width: 290,
							fieldLabel: 'Password',
							name: 'password',
							inputType: 'password',
							blankText: 'Please type in a password you can remember...',
							emptyText: 'Password',
							enforceMaxLength: true,
							maxLength: 64,
							minLength: 8,
							selectOnFocus: true
						},
						{
							xtype: 'textfield',
							itemId: 'joinPassword0',
							maxWidth: 290,
							style: {
								background: ''
							},
							width: 290,
							fieldLabel: '&nbsp;',
							labelSeparator: '&nbsp;',
							name: 'confirm_password',
							inputType: 'password',
							blankText: 'Please retype your password to confirm.',
							emptyText: 'Retype password',
							enforceMaxLength: true,
							maxLength: 64,
							minLength: 8,
							selectOnFocus: true
						},
						{
							xtype: 'container',
							height: 35,
							itemId: 'joinPassComponent',
							layout: {
								type: 'hbox',
								align: 'stretch',
								defaultMargins: {
									top: 0,
									right: 10,
									bottom: 0,
									left: 0
								}
							},
							items: [
								{
									xtype: 'label',
									width: 95,
									resizable: false
								},
								{
									xtype: 'container',
									flex: 1,
									height: 31,
									itemId: 'joinPassMeter',
									maxHeight: 31,
									maxWidth: 182,
									style: {
										border: '1px solid #B5B8C8',
										opacity: 0.25
									},
									width: 181,
									resizable: false,
									items: [
										{
											xtype: 'container',
											height: 30,
											itemId: 'joinPassBar',
											style: {
												backgroundPosition: '0 center',
												backgroundImage: 'url(/images/bg_strength_gradient.png)',
												backgroundPosition: '0 0',
												backgroundRepeat: 'no-repeat',
												position: 'absolute'
											},
											width: 180,
											resizable: false
										},
										{
											xtype: 'container',
											height: 30,
											html: '0%',
											itemId: 'joinPassScore',
											padding: 5,
											style: {
												fontWeight: 'bold',
												color: '000000',
												fontSize: '0.9em',
												lineHeight: '1.25em',
												position: 'absolute',
												textAlign: 'center',
												cursor: 'default'
											},
											width: 180,
											resizable: false
										}
									]
								}
							]
						},
						{
							xtype: 'container',
							itemId: 'joinPassChecker',
							layout: {
								type: 'hbox',
								align: 'stretch',
								defaultMargins: {
									top: 0,
									right: 10,
									bottom: 0,
									left: 0
								}
							},
							items: [
								{
									xtype: 'label',
									width: 95,
									resizable: false
								},
								{
									xtype: 'container',
									height: 31,
									html: 'Waiting to check password',
									itemId: 'joinPassCheckResult',
									style: {
										border: '1px solid #B5B8C8',
										opacity: 0.2
									},
									width: 181
								}
							]
						}
					]
				},
				{
					xtype: 'container',
					flex: 1,
					width: 300,
					layout: 'anchor',
					items: [
						{
							xtype: 'container',
							layout: 'hbox',
							items: [
								{
									xtype: 'container',
									maxWidth: 30,
									width: 30,
									items: [
										{
											xtype: 'image',
											height: 20,
											itemId: 'passReqMax',
											width: 20,
											src: '/extjs4/welcome/css/blank.gif'
										}
									]
								},
								{
									xtype: 'label',
									flex: 1,
									text: 'Maximum 64 characters in length'
								}
							]
						},
						{
							xtype: 'container',
							layout: 'hbox',
							items: [
								{
									xtype: 'container',
									maxWidth: 30,
									width: 30,
									items: [
										{
											xtype: 'image',
											height: 20,
											itemId: 'passReqMin',
											width: 20,
											src: '/extjs4/welcome/css/blank.gif'
										}
									]
								},
								{
									xtype: 'label',
									flex: 1,
									text: 'Minimum 8 characters in length'
								}
							]
						},
						{
							xtype: 'container',
							layout: 'hbox',
							items: [
								{
									xtype: 'container',
									maxWidth: 30,
									width: 30,
									items: [
										{
											xtype: 'image',
											height: 20,
											itemId: 'passReqUpper',
											width: 20,
											src: '/extjs4/welcome/css/blank.gif'
										}
									]
								},
								{
									xtype: 'label',
									flex: 1,
									text: 'Uppercase Letter'
								}
							]
						},
						{
							xtype: 'container',
							layout: 'hbox',
							items: [
								{
									xtype: 'container',
									maxWidth: 30,
									width: 30,
									items: [
										{
											xtype: 'image',
											height: 20,
											itemId: 'passReqLower',
											width: 20,
											src: '/extjs4/welcome/css/blank.gif'
										}
									]
								},
								{
									xtype: 'label',
									flex: 1,
									text: 'Lowercase Letter'
								}
							]
						},
						{
							xtype: 'container',
							layout: 'hbox',
							items: [
								{
									xtype: 'container',
									maxWidth: 30,
									width: 30,
									items: [
										{
											xtype: 'image',
											height: 20,
											itemId: 'passReqNum',
											width: 20,
											src: '/extjs4/welcome/css/blank.gif'
										}
									]
								},
								{
									xtype: 'label',
									flex: 1,
									text: 'Number'
								}
							]
						},
						{
							xtype: 'container',
							layout: 'hbox',
							items: [
								{
									xtype: 'container',
									maxWidth: 30,
									width: 30,
									items: [
										{
											xtype: 'image',
											height: 20,
											itemId: 'passReqSym',
											width: 20,
											src: '/extjs4/welcome/css/blank.gif'
										}
									]
								},
								{
									xtype: 'label',
									flex: 1,
									text: 'Symbol'
								}
							]
						}
					]
				},
				{
					xtype: 'chart',
					flex: 1,
					height: 240,
					hidden: true,
					itemId: 'passwordChart',
					width: 500,
					resizable: false,
					animate: {
						easing: 'bounceOut',
						duration: 750
					},
					insetPadding: 20,
					store: 'passCryptos',
					theme: 'Sky',
					axes: [
						{
							type: 'Numeric',
							grid: {
								even: {
									fill: '#ddd',
									stroke: '#bbb',
									strokeWidth: 1
								}
							},
							minorTickSteps: 1,
							title: 'Strength Tests',
							decimals: 0,
							maximum: 100,
							minimum: -60,
							position: 'left'
						}
					],
					series: [
						{
							type: 'column',
							renderer: function(sprite, record, attributes, index, store) {
								/*
								inspired by :
								http://www.easyrgb.com/index.php?X=MATH&H=21#text21
								http://www.javadocexamples.com/java/awt/java.awt.Color-source.html#line.927
								http://stackoverflow.com/questions/340209/generate-colors-between-red-and-green-for-a-power-meter
								HSV colour model: cycle the hue from 0 degrees (red) to 120 degrees (green)
								*/



								//if (bonus>0 && bonus < 100) console.warn("passwordChart.passwordSeries.renderer");

								var bonus = record.data.bonus,
								/* same as: store.data.items[index].data.bonus;
								bonus = Math.min( Math.max(0, bonus), 100 );
								// 0 <= bonus >= 100: */

								// calculate the red-blue-green value of the color-scale
									red = (255 * (100 - bonus ) ) / 100, // bonus: 0;
								green = (255 * bonus ) / 100,  // bonus: 100
								blue = 0,

								// calculate the red-yellow-green value of the color-scale
								H = bonus / 100 * 0.39, // Hue (note 0.4 = Green = 120 degress ; 0 = red = 0 degrees; see hue chart)
								S = 0.9, // Saturation
								B = 0.9; // Brightness; also noted as "V"


								//if( record.data.deduction===1 || bonus< 0 ) H = (60 + record.data.bonus)/60 * 0.4;
								//if (bonus>0 && bonus < 100) console.log("bonus: " + bonus + "; rgb(" + red + ", " + green + ", " + blue + "); HSB(" + H + ", " + S + ", " + B + ") = " + HSBtoRGB(H, S, B) );


								//attributes.fill = Ext.draw.Color.toHex("rgb(" + Math.ceil(red) + ", " + Math.ceil(green) + ", " + Math.ceil(blue) + ")");
								attributes.fill = Ext.draw.Color.toHex( HSBtoRGB(H, S, B) );
								//if (bonus>0 && bonus < 100) console.log("bonus: " + bonus + "; color: " + attributes.fill);

								return attributes;

							},
							highlight: true,
							label: {
								textAnchor: 'middle',
								display: 'insideEnd',
								field: 'bonus',
								color: '#AAA',
								fill: '#000',
								//stroke: "#FFF",
								orientation: 'horizontal',
								font: '12px Arial'
							},
							showInLegend: false,
							tips: {
								trackMouse: true,
								width: 100,
								height: 40,
								renderer: function(storeItem, item) {
									this.setTitle(storeItem.get('crypto'));
									this.update(storeItem.get('bonus'));
								}
							},
							xField: 'deduction',
							yField: 'bonus',
							groupGutter: 0,
							gutter: 20,
							style: {
								opacity: 0.25
							}
						}
					]
				}
			]
		});

		me.callParent(arguments);
	}

});