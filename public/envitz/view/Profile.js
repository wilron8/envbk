/*
 * File: envitz/view/Profile.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.Profile', {
	extend: 'Ext.container.Container',

	requires: [
		'envitz.view.imagePreviewer',
		'envitz.view.ComboSearchMultiFields',
		'Ext.tab.Panel',
		'Ext.form.Panel',
		'Ext.tab.Tab',
		'Ext.form.field.TextArea',
		'Ext.form.field.ComboBox',
		'Ext.form.Label',
		'Ext.view.View',
		'Ext.XTemplate',
		'Ext.Img',
		'Ext.form.field.Display',
		'envitz.view.AccountTermination',
		'envitz.view.AccountSuspension'
	],

	border: false,
	padding: 10,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'tabpanel',
					tabBar: {
						xtype: 'tabbar',
						border: 0,
						minWidth: 100,
						plain: true,
						layout: {
							type: 'hbox',
							align: 'stretch',
							pack: 'end'
						}
					},
					border: 0,
					itemId: 'ProfileTabPanel',
					minHeight: 500,
					defaults: {
						anchor: '100%'
					},
					activeTab: 0,
					minTabWidth: 100,
					plain: true,
					items: [
						{
							xtype: 'form',
							itemId: 'profileForm',
							defaults: {
								//anchor: '100%',
								padding: '5px'
							},
							bodyBorder: true,
							title: 'Edit',
							items: [
								{
									xtype: 'container',
									layout: {
										type: 'hbox',
										align: 'stretch'
									},
									items: [
										me.processUsr_icon({
											xtype: 'imagePreview',
											name: 'usr_icon',
											itemId: 'usr_icon'
										}),
										{
											xtype: 'textfield',
											flex: 1,
											margins: '0 0 0 5',
											height: 24,
											maxHeight: 24,
											maxWidth: 250,
											fieldLabel: '',
											name: 'usr_displayName',
											emptyText: 'Display Name (Full name if blank)'
										}
									]
								},
								{
									xtype: 'textareafield',
									anchor: '100%',
									fieldLabel: '',
									name: 'usr_about',
									emptyText: 'A little bit about youz...'
								},
								{
									xtype: 'container',
									layout: {
										type: 'hbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'combobox',
											flex: 1,
											itemId: 'joinDOBy',
											maxWidth: 200,
											width: 200,
											fieldLabel: 'Birthday',
											name: 'dob_year',
											emptyText: 'Year',
											enforceMaxLength: true,
											maxLength: 4,
											store: 'dobYear',
											valueField: 'id'
										},
										{
											xtype: 'combobox',
											flex: 1,
											itemId: 'joinDOBm',
											margin: '0 0 0 5',
											maxWidth: 65,
											width: 65,
											fieldLabel: '',
											labelWidth: 75,
											name: 'dob_month',
											emptyText: 'Month',
											enforceMaxLength: true,
											maxLength: 4,
											store: 'dobMonth',
											valueField: 'text'
										},
										{
											xtype: 'combobox',
											flex: 1,
											itemId: 'joinDOBd',
											margin: '0 0 0 5',
											maxWidth: 65,
											width: 65,
											fieldLabel: '',
											labelWidth: 75,
											name: 'dob_day',
											emptyText: 'Day',
											enforceMaxLength: true,
											maxLength: 4,
											store: 'dobDay',
											valueField: 'text'
										}
									]
								},
								{
									xtype: 'combobox',
									anchor: '100%',
									maxWidth: 300,
									fieldLabel: 'Gender',
									name: 'usr_gender',
									emptyText: '(Not specified)',
									queryMode: 'local',
									store: 'gender',
									typeAhead: true,
									valueField: 'id'
								},
								{
									xtype: 'container',
									layout: {
										type: 'vbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'label',
											margins: '0 0 10 0',
											style: {
												textDecoration: 'underline',
												fontWeight: 'bold',
												fontSize: 'large',
												display: 'inline-block'
											},
											text: 'Language'
										},
										{
											xtype: 'container',
											flex: 1,
											items: [
												{
													xtype: 'dataview',
													itemId: 'langView',
													minWidth: 255,
													tpl: [
														'<tpl for=".">',
														'	<div class="item">',
														'		<div style="display:inline-block;width:200px;">{geoLang_name}</div>',
														'		<div style="display:inline-block"><span style="cursor:pointer;" class="icon-delete"><span class="delete" style="display:inline-block;height:16px;width:16px;"></span></span></div>',
														'	</div>',
														'</tpl>'
													],
													itemSelector: 'div.item',
													store: 'profileLanguages'
												},
												{
													xtype: 'container',
													layout: {
														type: 'hbox',
														align: 'stretch'
													},
													items: [
														{
															xtype: 'combosearchmultifields',
															searchFields: [
																'geoLang_name',
																'geoLang_roman',
																'geoLang_ISO639'
															],
															itemId: 'langCombo',
															maxHeight: 200,
															minWidth: 198,
															fieldLabel: '',
															name: 'usr_lang',
															emptyText: 'Select Language',
															enforceMaxLength: false,
															displayField: 'geoLang_name',
															forceSelection: true,
															store: 'languages',
															valueField: 'geoLang_id',
															valueNotFoundText: 'Language not supported, please select from this list'
														},
														{
															xtype: 'button',
															margins: '0 0 0 5',
															border: false,
															itemId: 'btnAddLang',
															maxHeight: 24,
															style: {
																background: 'none'
															},
															iconCls: 'icon-plus',
															text: ''
														}
													]
												}
											]
										}
									]
								},
								{
									xtype: 'container',
									layout: {
										type: 'vbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'label',
											flex: 1,
											margins: '0 0 10 0 ',
											maxWidth: 105,
											style: {
												textDecoration: 'underline',
												fontWeight: 'bold',
												fontSize: 'large',
												display: 'inline-block'
											},
											width: 105,
											text: 'Location'
										},
										{
											xtype: 'dataview',
											flex: 1,
											itemId: 'address_view',
											tpl: Ext.create('Ext.XTemplate', 
												'<tpl for=".">',
												'	<div class="holder">',
												'		<div style="display:inline-block;height:25px;">',
												'			<input type="text" style="width:260px;" data-index="{[xindex-1]}" data-name="uAddr_city" class="for-edit x-form-field x-form-text" name="uAddr_city" value="{uAddr_city}" />',
												'		</div>',
												'		<div id="location{uAddr_country}" data="{uAddr_country}" style="height:24px;display:inline-block;width:300px;">',
												'			<input type="text" data-index="{[xindex-1]}" style="width:290px;" class="addr_country x-form-field x-form-text" name="uAddr_country" value="{[this.getCountry(values.uAddr_country)]}" />',
												'		</div>',
												'		<div class="item" style="display:inline-block"><span class="icon-delete" style="text-decoration:underline;cursor:pointer;">',
												'			<span class="remove" style="display:inline-block;height:16px;width:16px;">',
												'			</span>',
												'			</span>',
												'		</div>',
												'	</div>',
												'</tpl>',
												{
													getCountry: function(id) {
														var record = Ext.StoreMgr.lookup('countries').findRecord('geoCountry_id',id);
														if(record){
															return record.get('geoCountry_roman');
														}
														return "";
													}
												}
											),
											itemSelector: 'div.item',
											store: 'profileAddress'
										},
										{
											xtype: 'container',
											flex: 1,
											layout: {
												type: 'hbox',
												align: 'stretch'
											},
											items: [
												{
													xtype: 'textfield',
													itemId: 'add_city',
													width: 260,
													fieldLabel: '',
													name: 'uAddr_city',
													emptyText: 'City'
												},
												{
													xtype: 'combosearchmultifields',
													displayTpl: '<tpl for=".">{geoContinent_region} / {geoCountry_roman} ( {geoCountry_name} )</tpl>',
													listConfig: {
														loadingText: 'Populating list...',
														getInnerTpl: function() {
															return '<tpl for="."><div data-qtip="[{geoCountry_id}] {geoContinent_region} / {geoCountry_roman}">{geoContinent_region} / {geoCountry_name} <IMG style="float:right" src="/images/icons/flags/{geoCountry_flagImg}" /></div></tpl>';
														}
													},
													searchFields: [
														'geoCountry_roman',
														'geoCountry_name',
														'geoCountry_ISO3166',
														'geoContinent_region'
													],
													itemId: 'add_country',
													margin: '0 0 0 4',
													width: 290,
													name: 'uAddr_country',
													store: 'countries',
													valueField: 'geoCountry_id'
												},
												{
													xtype: 'button',
													margins: '0 0 0 11',
													border: false,
													itemId: 'btnAddLocation',
													style: {
														background: 'none'
													},
													width: 23,
													iconCls: 'icon-plus',
													text: ''
												}
											]
										}
									]
								},
								{
									xtype: 'container',
									layout: {
										type: 'vbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'label',
											margins: '0 0 10 0',
											style: {
												textDecoration: 'underline',
												fontWeight: 'bold',
												fontSize: 'large',
												display: 'inline-block'
											},
											width: 105,
											text: 'Skills'
										},
										{
											xtype: 'container',
											flex: 1,
											items: [
												{
													xtype: 'dataview',
													itemId: 'skillView',
													minWidth: 255,
													itemSelector: 'div.item',
													itemTpl: [
														'<div class="item">',
														'	<div style="display:inline-block;width:200px;">{stag_text}</div>',
														'	<div style="display:inline-block"><span style="cursor:pointer;" class="icon-delete"><span class="delete" style="display:inline-block;height:16px;width:16px;"></span></span></div>',
														'</div>'
													],
													store: 'userSkills'
												},
												{
													xtype: 'container',
													layout: {
														type: 'hbox',
														align: 'stretch'
													},
													items: [
														{
															xtype: 'combobox',
															itemId: 'skillCombo',
															minWidth: 198,
															fieldLabel: '',
															anyMatch: true,
															displayField: 'stag_text',
															queryMode: 'local',
															store: 'skills',
															typeAhead: true,
															valueField: 'stag_id'
														},
														{
															xtype: 'button',
															margins: '0 0 0 5',
															border: false,
															itemId: 'btnAddSkill',
															maxHeight: 24,
															style: {
																background: 'none'
															},
															iconCls: 'icon-plus',
															text: ''
														}
													]
												}
											]
										}
									]
								},
								{
									xtype: 'container',
									layout: {
										type: 'vbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'label',
											margins: '0 0 10 0',
											style: {
												textDecoration: 'underline',
												fontWeight: 'bold',
												fontSize: 'large',
												display: 'inline-block'
											},
											width: 105,
											text: 'Certifications'
										},
										{
											xtype: 'container',
											flex: 1,
											items: [
												{
													xtype: 'dataview',
													itemId: 'certView',
													minWidth: 255,
													itemSelector: 'div.item',
													itemTpl: [
														'<div class="item">',
														'	<div style="display:inline-block;width:200px;">{cert_text}</div>',
														'	<div style="display:inline-block"><span style="cursor:pointer;" class="icon-delete"><span class="delete" style="display:inline-block;height:16px;width:16px;"></span></span></div>',
														'</div>'
													],
													store: 'userCertificates'
												},
												{
													xtype: 'container',
													layout: {
														type: 'hbox',
														align: 'stretch'
													},
													items: [
														{
															xtype: 'combobox',
															itemId: 'certCombo',
															minWidth: 198,
															fieldLabel: '',
															anyMatch: true,
															displayField: 'cert_text',
															queryMode: 'local',
															store: 'certificates',
															typeAhead: true,
															valueField: 'cert_id'
														},
														{
															xtype: 'button',
															margins: '0 0 0 5',
															border: false,
															itemId: 'btnAddCert',
															maxHeight: 24,
															style: {
																background: 'none'
															},
															iconCls: 'icon-plus',
															text: ''
														}
													]
												}
											]
										}
									]
								},
								{
									xtype: 'container',
									items: [
										{
											xtype: 'label',
											margin: '0 0 10 0',
											style: {
												textDecoration: 'underline',
												fontWeight: 'bold',
												fontSize: 'large',
												display: 'inline-block'
											},
											text: 'Contact'
										},
										{
											xtype: 'dataview',
											itemId: 'contactview',
											tpl: Ext.create('Ext.XTemplate', 
												'<tpl for=".">',
												'	<div class="holder">',
												'		<div style="display:inline-block;height:25px;" data="{type}" id="contact{type}"><input data-index="{[xindex-1]}" type="text" style="width:160px;" class="contacttype x-form-field x-form-text" name="type" value="{[this.getType(values.type)]}" /></div>',
												'		<div style="display:inline-block"><input type="text" style="width:260px;" data-name="value" data-index="{[xindex-1]}"  class="for-edit x-form-field x-form-text" name="value" value="{value}" /></div>',
												'		<div class="item" style="display:inline-block"><span class="icon-delete" style="text-decoration:underline;cursor:pointer;"><span class="remove" style="display:inline-block;height:16px;width:16px;"></span></span></div>',
												'	</div>',
												'</tpl>',
												'<div  id="contact_form">',
												'	<div style="display:inline-block;height:25px;" data="0"><input type="text" style="width:160px;" placeholder="Type" class="contacttype x-form-field x-form-text" name="type" value="" /></div>',
												'	<div style="display:inline-block"><input type="text" style="width:260px;" class="x-form-field x-form-text" name="value" placeholder="Value" /></div>',
												'	<div style="display:inline-block">',
												'		<span class="add_contact icon-plus" style="text-decoration:underline;cursor:pointer;"></span>',
												'	</div>',
												'</div>',
												{
													getType: function(type) {
														var record = Ext.StoreMgr.lookup('contactType').findRecord('id',type);
														if(record){
															return record.get('type');
														}
														return "";
													}
												}
											),
											itemSelector: 'div.item',
											store: 'contacts'
										}
									]
								},
								{
									xtype: 'container',
									items: [
										{
											xtype: 'label',
											margin: '0 0 10 0',
											style: {
												textDecoration: 'underline',
												fontWeight: 'bold',
												fontSize: 'large',
												display: 'inline-block'
											},
											text: 'Education'
										},
										{
											xtype: 'dataview',
											itemId: 'edFormList',
											tpl: [
												'<tpl for=".">',
												'	<div class="holder">',
												'		<div style="display:inline-block"><input type="text" style="width:200px;" data-index="{[xindex-1]}" data-name="ed_name" class="for-edit x-form-field x-form-text" name="ed_name" value="{ed_name}" /></div>',
												'		<div style="display:inline-block"><input type="text" style="width:200px;" data-index="{[xindex-1]}" data-name="ed_major" class="for-edit x-form-field x-form-text" name="ed_major" value="{ed_major}" /> </div>',
												'		<div style="display:inline-block"><input type="text" style="width:60px;" data-index="{[xindex-1]}" data-name="ed_fromDate" class="for-edit x-form-field x-form-text" name="ed_fromDate" value="{ed_fromDate}" /></div>',
												'		<div style="display:inline-block"><input type="text" style="width:60px;" data-index="{[xindex-1]}" data-name="ed_toDate" class="for-edit x-form-field x-form-text" name="ed_toDate" value="{ed_toDate}" /></div>',
												'		<div class="item" style="display:inline-block"><span class="icon-delete" style="text-decoration:underline;cursor:pointer;"><span class="delete" style="display:inline-block;height:16px;width:16px;"></span></span> </div>',
												'	</div>',
												'</tpl>',
												'<div id="add_education_form">',
												'	<div style="display:inline-block"><input type="text" style="width:200px;" class="x-form-field x-form-text" name="ed_name" placeholder="Name of school" /></div>',
												'	<div style="display:inline-block"><input type="text" style="width:200px;" class="x-form-field x-form-text" name="ed_major" placeholder="Major(optional)" /></div>',
												'	<div style="display:inline-block"><input type="text" style="width:60px;" class="x-form-field x-form-text" name="ed_fromDate" placeholder="Start" /></div>',
												'	<div style="display:inline-block"><input type="text" style="width:60px;" class="x-form-field x-form-text" name="ed_toDate" placeholder="End" /></div>',
												'	<div style="display:inline-block">',
												'		<span id="add_education_btn" class="icon-plus" style="text-decoration:underline;cursor:pointer;"></span>',
												'	</div>',
												'</div>'
											],
											itemSelector: 'div.item',
											store: 'education'
										}
									]
								},
								{
									xtype: 'container',
									items: [
										{
											xtype: 'label',
											margin: '0 0 10 0',
											style: {
												textDecoration: 'underline',
												fontWeight: 'bold',
												fontSize: 'large',
												display: 'inline-block'
											},
											text: 'Work Experience'
										},
										{
											xtype: 'dataview',
											itemId: 'xpFormList',
											tpl: [
												'<tpl for=".">',
												'	<div class="holder">',
												'		<div style="display:inline-block"><input type="text" style="width:200px;" class="for-edit x-form-field x-form-text" data-name="xp_name" data-index="{[xindex-1]}" name="xp_name" value="{xp_name}" /></div>',
												'		<div style="display:inline-block"><input type="text" style="width:200px;" class="for-edit x-form-field x-form-text" data-name="xp_jobTitle" data-index="{[xindex-1]}" name="xp_jobTitle" value="{xp_jobTitle}" /> </div>',
												'		<div style="display:inline-block"><input type="text" style="width:60px;" class="for-edit x-form-field x-form-text" data-name="xp_fromDate" data-index="{[xindex-1]}" name="xp_fromDate" value="{xp_fromDate}" /></div>',
												'		<div style="display:inline-block"><input type="text" style="width:60px;" class="for-edit x-form-field x-form-text" data-name="xp_toDate" data-index="{[xindex-1]}" name="xp_toDate" value="{xp_toDate}" /></div>',
												'		<div class="item" style="display:inline-block"><span class="icon-delete" style="text-decoration:underline;cursor:pointer;"><span class="delete" style="display:inline-block;height:16px;width:16px;"></span></span></div>',
												'	</div>',
												'</tpl>',
												'<div  id="add_experience_form">',
												'	<div style="display:inline-block"><input type="text" style="width:200px;" class="x-form-field x-form-text" name="xp_name" placeholder="Name of organization" /></div>',
												'	<div style="display:inline-block"><input type="text" style="width:200px;" class="x-form-field x-form-text" name="xp_jobTitle" placeholder="Job title(optional)" /></div>',
												'	<div style="display:inline-block"><input type="text" style="width:60px;" class="x-form-field x-form-text" name="xp_fromDate" placeholder="Start" /></div>',
												'	<div style="display:inline-block"><input type="text" style="width:60px;" class="x-form-field x-form-text" name="xp_toDate" placeholder="End" /></div>',
												'	<div style="display:inline-block">',
												'		<span class="add_experience icon-plus" style="text-decoration:underline;cursor:pointer;"></span>',
												'	</div>',
												'</div>'
											],
											itemSelector: 'div.item',
											store: 'experience'
										}
									]
								}
							]
						},
						{
							xtype: 'panel',
							itemId: 'PreviewPanelProfile',
							bodyBorder: false,
							frameHeader: false,
							title: 'Preview',
							items: [
								{
									xtype: 'form',
									border: false,
									itemId: 'PreviewForm',
									bodyPadding: 10,
									header: false,
									title: 'My Form',
									items: [
										{
											xtype: 'container',
											layout: {
												type: 'hbox',
												align: 'stretch'
											},
											items: [
												me.processPreviewImage({
													xtype: 'image',
													height: 64,
													itemId: 'previewImage',
													width: 64,
													src: 'no-image.png'
												}),
												{
													xtype: 'displayfield',
													margins: '0 0 0 5',
													fieldLabel: '',
													name: 'usr_displayName',
													value: 'Display Field'
												}
											]
										},
										{
											xtype: 'displayfield',
											anchor: '100%',
											fieldLabel: '',
											name: 'usr_about',
											value: 'Display Field'
										},
										{
											xtype: 'displayfield',
											anchor: '100%',
											itemId: 'usr_dob',
											fieldLabel: 'Birthday',
											name: 'usr_dob',
											value: 'Display Field'
										},
										{
											xtype: 'displayfield',
											anchor: '100%',
											itemId: 'genderDisplay',
											fieldLabel: 'Gender',
											name: 'usr_gender',
											value: 'Display Field'
										},
										{
											xtype: 'container',
											layout: {
												type: 'hbox',
												align: 'stretch'
											},
											items: [
												{
													xtype: 'label',
													width: 105,
													text: 'Language:'
												},
												{
													xtype: 'dataview',
													itemSelector: 'div.item',
													itemTpl: [
														'<div class="item">{geoLang_name}</div>'
													],
													store: 'profileLanguages'
												}
											]
										},
										{
											xtype: 'container',
											layout: {
												type: 'hbox',
												align: 'stretch'
											},
											items: [
												{
													xtype: 'label',
													flex: 1,
													maxWidth: 105,
													width: 105,
													text: 'Location:'
												},
												{
													xtype: 'dataview',
													flex: 1,
													itemSelector: 'div.item',
													itemTpl: Ext.create('Ext.XTemplate', 
														'<div class="item">',
														'	<div style="display:inline-block;margin-right:5px;;">{uAddr_city}</div>',
														'	<div style="display:inline-block;">{[this.displayCountry(values.uAddr_country)]}</div>',
														'</div>',
														'	',
														{
															displayCountry: function(country) {
																var countryStore = Ext.StoreMgr.lookup("countries");
																var countryRecord = countryStore.findRecord('geoCountry_id', country);
																return countryRecord.get('geoCountry_name');
															}
														}
													),
													store: 'profileAddress'
												}
											]
										},
										{
											xtype: 'container',
											layout: {
												type: 'hbox',
												align: 'stretch'
											},
											items: [
												{
													xtype: 'label',
													width: 105,
													text: 'Skills:'
												},
												{
													xtype: 'dataview',
													itemSelector: 'div.item',
													itemTpl: [
														'<div class="item">{stag_text}</div>'
													],
													store: 'userSkills'
												}
											]
										},
										{
											xtype: 'container',
											layout: {
												type: 'hbox',
												align: 'stretch'
											},
											items: [
												{
													xtype: 'label',
													width: 105,
													text: 'Certifications:'
												},
												{
													xtype: 'dataview',
													itemSelector: 'div.item',
													itemTpl: [
														'<div class="item">{cert_text}</div>'
													],
													store: 'userCertificates'
												}
											]
										},
										{
											xtype: 'container',
											items: [
												{
													xtype: 'label',
													style: {
														textDecoration: 'underline',
														fontWeight: 'bold',
														fontSize: 'large'
													},
													text: 'Contact'
												},
												{
													xtype: 'dataview',
													itemSelector: 'div.item',
													itemTpl: Ext.create('Ext.XTemplate', 
														'<div class="holder">',
														'	<div style="display:inline-block;width:150px;">{[this.renderType(values.type)]}</div>',
														'	<div style="display:inline-block;width:150px;">{value} </div>',
														'</div>',
														{
															renderType: function(type) {
																var store = Ext.StoreMgr.lookup('contactType');
																var record = store.findRecord('id',type);
																return record.get('type');
															}
														}
													),
													store: 'contacts'
												}
											]
										},
										{
											xtype: 'container',
											items: [
												{
													xtype: 'label',
													style: {
														textDecoration: 'underline',
														fontWeight: 'bold',
														fontSize: 'large'
													},
													text: 'Education'
												},
												{
													xtype: 'dataview',
													tpl: [
														'<tpl for=".">',
														'	<div class="holder">',
														'		<div style="display:inline-block;min-width:200px;">{ed_name}</div>',
														'		<div style="display:inline-block;min-width:200px;"> {ed_major} </div>',
														'		<div style="display:inline-block;min-width:140px;">{ed_fromDate} - {ed_toDate}</div>',
														'	</div>',
														'</tpl>',
														''
													],
													itemSelector: 'div.holder',
													store: 'education'
												}
											]
										},
										{
											xtype: 'container',
											items: [
												{
													xtype: 'label',
													style: {
														textDecoration: 'underline',
														fontWeight: 'bold',
														fontSize: 'large'
													},
													text: 'Work Experience'
												},
												{
													xtype: 'dataview',
													tpl: [
														'<tpl for=".">',
														'	<div class="holder">',
														'		<div style="display:inline-block;min-width:200px;">{xp_name}</div>',
														'		<div style="display:inline-block;min-width:200px;"> {xp_jobTitle} </div>',
														'		<div style="display:inline-block;min-width:140px;">{xp_fromDate} - {xp_toDate}</div>',
														'		',
														'	</div>',
														'</tpl>',
														''
													],
													itemSelector: 'div.holder',
													store: 'experience'
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					xtype: 'container',
					margin: 10,
					layout: 'column',
					items: [
						{
							xtype: 'button',
							itemId: 'btnDoneProfile',
							width: 100,
							text: 'Done'
						},
						{
							xtype: 'button',
							itemId: 'btnCancelProfile',
							margin: '0 0 0 5',
							width: 100,
							text: 'Cancel'
						},
						{
							xtype: 'container',
							margin: '0 0 0 100',
							style: {
								textAlign: 'right'
							},
							defaultAlign: 'tr-br?',
							items: [
								{
									xtype: 'button',
									handler: function(button, e) {
										//Alert("Deactivate Manager", "//TODO: give user option to 'take a digital vacation'...");
										Ext.create('envitz.view.AccountSuspension').show();
									},
									text: 'DEACTIVATED'
								},
								{
									xtype: 'button',
									handler: function(button, e) {
										// this button-action should only be available after 30 days of deactivation.

										Ext.create('envitz.view.AccountTermination').show();
									},
									margin: '0 0 0 5',
									text: 'TERMINATE Account'
								}
							]
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	processUsr_icon: function(config) {
		config.src = LApp.user.photo;
		return config;
	},

	processPreviewImage: function(config) {
		if (LApp.user.photo) {
			config.src = LApp.user.photo;
		} else {
			config.src = "/images/photo001.png";
		}

		return config;
	}

});