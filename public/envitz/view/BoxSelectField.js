/*
 * File: envitz/view/BoxSelectField.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.BoxSelectField', {
	extend: 'Ext.form.field.Trigger',
	alias: 'widget.boxselectfield',

	type: 'boxselectfield',
	waitForOuterWidthInDom: true,
	fieldLabel: 'Label',

	initComponent: function() {
		var me = this;

		me.callParent(arguments);
	},

	beginLayout: function(ownerContext) {
		/**
		* Ensures the input element takes up the maximum amount of remaining list width,
		* or the entirety of the list width if too little space remains. In this case,
		* the list height will be automatically increased to accomodate the new line. This
		* growth will not occur if {@link Ext.ux.form.field.BoxSelect#multiSelect} or
		* {@link Ext.ux.form.field.BoxSelect#grow} is false.
		*/

		var me = this,
			owner = me.owner;

		me.callParent(arguments);

		ownerContext.inputElCtContext = ownerContext.getEl('inputElCt');
		owner.inputElCt.setStyle('width','');

		me.skipInputGrowth = !owner.grow || !owner.multiSelect;

	},

	beginLayoutFixed: function(ownerContext, width, suffix) {
		var me = this,
			owner = ownerContext.target;

		owner.triggerEl.setStyle('height', '24px');

		me.callParent(arguments);

		if (ownerContext.heightModel.fixed && ownerContext.lastBox) {
			owner.listWrapper.setStyle('height', ownerContext.lastBox.height+'px');
			owner.itemList.setStyle('height', '100%');
		}
		/*No inputElCt calculations here!*/

	},

	publishInnerWidth: function(ownerContext) {
		/*Calculate and cache value of input container.*/

		var me = this,
			owner = me.owner,
			width = owner.itemList.getWidth(true) - 10,
			lastEntry = owner.inputElCt.prev(null, true);

		if (lastEntry && !owner.stacked) {
			lastEntry = Ext.fly(lastEntry);
			width = width - lastEntry.getOffsetsTo(lastEntry.up(''))[0] - lastEntry.getWidth();
		}

		if (!me.skipInputGrowth && (width < 35)) {
			width = width - 10;
		} else if (width < 1) {
			width = 1;
		}

		ownerContext.inputElCtContext.setWidth(width);

	}

});