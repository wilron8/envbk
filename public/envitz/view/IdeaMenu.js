/*
 * File: envitz/view/IdeaMenu.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.IdeaMenu', {
	extend: 'Ext.button.Button',

	requires: [
		'Ext.menu.Menu',
		'Ext.menu.Item'
	],

	ideaId: 0,
	frame: false,
	arrowCls: '  ',
	iconAlign: 'top',
	iconCls: 'icon-dropdown',
	menuAlign: 'tr-br?',
	scale: 'medium',
	text: '',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			menu: {
				xtype: 'menu',
				width: 140,
				items: [
					me.processUnfollowItem({
						xtype: 'menuitem',
						handler: function(item, e) {
							try{
								var me = this,
									holder = Ext.select('span.idea_founfo_holder');
								LApp.foUnfoIdea(holder,me.ideaId,2,function(){
									var follow = me.down('#followItem');
									follow.setVisible(true);
									item.setVisible(false);
								});
							}
							catch(e){

							}
						},
						itemId: 'unfollowItem',
						text: 'Unfollow'
					}),
					me.processFollowItem({
						xtype: 'menuitem',
						handler: function(item, e) {
							try{
								var me = this,
									holder = Ext.select('span.idea_founfo_holder');
								LApp.foUnfoIdea(holder,me.ideaId,1,function(){
									var unfollow = me.down('#unfollowItem');
									item.setVisible(false);
									unfollow.setVisible(true);
								});
							}catch(e){

							}
						},
						itemId: 'followItem',
						text: 'Follow'
					}),
					me.processViewevolution({
						xtype: 'menuitem',
						handler: function(item, e) {
							var me=this;

							me.loadWait();
							window.location = LApp.ideaMenu.evolution.url;
						},
						text: 'View evolution'
					}),
					me.processEvolve({
						xtype: 'menuitem',
						handler: function(item, e) {
							this.loadWait();
							window.location = LApp.ideaMenu.evolve.url;
						},
						text: 'Evolve'
					}),
					me.processUpdate({
						xtype: 'menuitem',
						handler: function(item, e) {
							this.loadWait();
							window.location = LApp.ideaMenu.update.url;
						},
						text: 'Update'
					}),
					me.processRemove({
						xtype: 'menuitem',
						handler: function(item, e) {
							var me = this;

							Ext.Msg.show({
								title: 'Idea Management',
								msg: me.hideAlert + '<BR><BR>' + me.ideaInformation + "<BR>" + me.ideaCreator + "<BR><BR>" + me.hideWarning + "<BR><BR>",
								minWidth: 400,
								minHeight: 200,
								modal: false,
								icon: Ext.MessageBox.QUESTION,
								buttons: Ext.Msg.YESNO,
								fn: function (btn) {
									if (btn === 'yes') {
										me.removeIdea();
									}
								}
							});

						},
						text: 'Remove'
					}),
					me.processStartproject({
						xtype: 'menuitem',
						handler: function(item, e) {
							this.loadWait();
							window.location= LApp.ideaMenu.start_project.url;
						},
						text: 'Start project'
					}),
					me.processReportviolation({
						xtype: 'menuitem',
						handler: function(item, e) {
							var me = this,
								ideaWindow= Ext.create('envitz.view.ReportViolation',{
									ideaDesc: true,
									URL: LApp.basePath + '/idea/reportIdea/' + LApp.thisPage.mainID
								});

							ideaWindow.show();
						},
						text: 'Report violation'
					})
				]
			},
			listeners: {
				mouseout: {
					fn: me.onButtonMouseOut,
					scope: me
				},
				mouseover: {
					fn: me.onButtonMouseOver,
					scope: me
				}
			}
		});

		me.callParent(arguments);
	},

	processUnfollowItem: function(config) {
		if (!LApp.ideaMenu.unfollow) {
			config.hidden = true;
		}
		config.scope = this;
		return config;
	},

	processFollowItem: function(config) {
		if (!LApp.ideaMenu.follow) {
			config.hidden = true;
		}

		config.scope = this;
		return config;
	},

	processViewevolution: function(config) {
		config.scope = this;
		return config;
	},

	processEvolve: function(config) {
		config.scope = this;
		return config;
	},

	processUpdate: function(config) {
		if(!LApp.ideaMenu.update){
			config.hidden=true;
		}

		config.scope = this;
		return config;
	},

	processRemove: function(config) {
		if (!LApp.ideaMenu.remove) {
			config.hidden = true;
		}

		config.scope = this;
		return config;
	},

	processStartproject: function(config) {
		config.scope = this;
		return config;
	},

	processReportviolation: function(config) {
		if (!LApp.ideaMenu.report) {
			config.hidden = true;
		}

		config.scope = this;
		return config;
	},

	onButtonMouseOut: function(button, e, eOpts) {
		if (button.hasVisibleMenu()) {
			//button.hideMenu();
		}
	},

	onButtonMouseOver: function(button, e, eOpts) {
		if (!button.hasVisibleMenu()) {
			button.showMenu();
		}
	},

	removeIdea: function() {
		var me = this;

		Ext.Ajax.request({
			url: LApp.ideaMenu.remove.url,
			success: function (response) {
				var svrMsg = Ext.JSON.decode(response.responseText);
				if (svrMsg.success === true) {
					Ext.Msg.alert('Information','The idea has been successfuly removed.', function(){
						window.location = LApp.basePath + "/idea";
					});
				}else{
					Ext.Msg.alert('There is a problem removing this idea.');
				}
			},
			failure: function () {
				Alert('Error','Network Operation Timed-out. Your connection to the server was lost. Please check your Internet connection and try again later.');
			}

		});
	},

	loadWait: function() {
		try {
			Ext.getBody().mask("Please wait... ロード中です。お待ちくださませ。");
		} catch (e) {
			Ext.Error.raise(' IDEA menu failure\n' + e.description);
		}
	}

});