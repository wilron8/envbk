/*
 * File: envitz/view/CommentMenu.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.CommentMenu', {
	extend: 'Ext.button.Button',

	requires: [
		'Ext.menu.Menu',
		'Ext.menu.Item',
		'envitz.view.RemoveComment',
		'envitz.view.ReportViolation'
	],

	commentId: 0,
	commentWarning: '',
	commentAlert: '',
	isCommenter: 0,
	isOwner: 0,
	arrowAlign: 'bottom',
	arrowCls: ' ',
	iconAlign: 'top',
	iconCls: 'icon-dropdown',
	menuAlign: 'tr-br?',
	scale: 'medium',
	text: '',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			menu: {
				xtype: 'menu',
				width: 120,
				items: [
					me.processRemove({
						xtype: 'menuitem',
						handler: function(item, e) {
							var window= Ext.create('envitz.view.RemoveComment',{
								URL: me.removeUrl,
								selector: this.selector
							});

							window.show();
						},
						text: 'Remove'
					}),
					me.processReportviolation({
						xtype: 'menuitem',
						handler: function(item, e) {
							var dom = Ext.get(me.selector);


							//me.commentId = dom.getAttribute('data-commentId');
							var params = {
								commentId: me.commentId,
								selector: me.selector,
								URL: me.reportUrl
							};
							if(this.prjWDesc===true){
								params.prjWDesc=true;
							}

							var window= Ext.create('envitz.view.ReportViolation',params);

							window.show();
						},
						text: 'Report violation'
					})
				]
			},
			listeners: {
				mouseover: {
					fn: me.onButtonMouseOver,
					scope: me
				},
				mouseout: {
					fn: me.onButtonMouseOut,
					scope: me
				}
			}
		});

		me.callParent(arguments);
	},

	processRemove: function(config) {
		var dom = Ext.get(this.selector);
		//console.log(dom);

		//config.isCommenter = dom.getAttribute('data-isCommenter');
		//config.isCommenter = (dom.getAttribute('data-isCommenter') | dom.getAttribute('data-iscommenter'));

		if( dom.getAttribute('data-isCommenter') !== "1" && LApp.thisPage.isOwner !== "1"){
			config.hidden = true;
		}

		config.scope = this;
		return config;

	},

	processReportviolation: function(config) {
		var dom = Ext.get(this.selector);

		if (dom.getAttribute('data-isCommenter') === "1"){
			config.hidden = true;
		}

		config.scope = this;
		return config;
	},

	onButtonMouseOver: function(button, e, eOpts) {
		if (!button.hasVisibleMenu()) {
			button.showMenu();
		}
	},

	onButtonMouseOut: function(button, e, eOpts) {
		if (button.hasVisibleMenu()) {
			//button.hideMenu();
		}
	}

});