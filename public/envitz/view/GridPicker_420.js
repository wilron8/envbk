/*
 * File: envitz/view/GridPicker_420.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.GridPicker_420', {
	extend: 'Ext.Component',

	height: 250,
	width: 400,

	initComponent: function() {
		var me = this;

		me.callParent(arguments);
	},

	getLoadOptions: function(queryString) {
		// SEE: https://github.com/rixo/GridPicker/blob/master/ux/Rixo/form/field/GridPicker-4-2-0.js

		/**
		* Gets the option to load the store with the specified query.
		*
		* @param {String} queryString
		* @return {String}
		* @protected
		*/

		var filter = this.queryFilter;

		if (filter) {
			filter.disabled = false;
			filter.setValue(this.enableRegEx ? new RegExp(queryString) : queryString);
			return {
				filters: [filter]
			};
		}
	},

	loadPage: function(pageNum) {
		/**
		* @inheritdoc
		* Overridden in order to implement {@link #getLoadOptions}.
		*/

		this.store.loadPage(pageNum, this.getLoadOptions());
	},

	doQuery: function(queryString, forceAll, rawQuery) {
		/**
		* @inheritdoc
		* Overridden in order to implement {@link #getLoadOptions}.
		*/

		queryString = queryString || '';

		// store in object and pass by reference in 'beforequery'
		// so that client code can modify values.
		var me = this,
			qe = {
				query: queryString,
				forceAll: forceAll,
				combo: me,
				cancel: false
			},
			store = me.store,
			isLocalMode = me.queryMode === 'local';

		if (me.fireEvent('beforequery', qe) === false || qe.cancel) {
			return false;
		}

		// get back out possibly modified values
		queryString = qe.query;
		forceAll = qe.forceAll;

		// query permitted to run
		if (forceAll || (queryString.length >= me.minChars)) {
			// expand before starting query so LoadMask can position itself correctly
			me.expand();

			// make sure they aren't querying the same thing
			if (!me.queryCaching || me.lastQuery !== queryString) {
				me.lastQuery = queryString;

				if (isLocalMode) {
					if (me.queryFilter) {
						// Querying by a typed string...
						if (queryString || !forceAll) {

							// Ensure queryFilter is enabled and set the new value
							me.queryFilter.disabled = false;
							me.queryFilter.setValue(me.enableRegEx ? new RegExp(queryString) : queryString);
						}

						// Disable query value filter if no query string or forceAll passed
						else {
							me.queryFilter.disabled = true;
						}

						// Filter the Store according to the updated filter
						store.filter();
					}
				} else {
					// Set flag for onLoad handling to know how the Store was loaded
					me.rawQuery = rawQuery;

					// In queryMode: 'remote', we assume Store filters are added by the developer as remote filters,
					// and these are automatically passed as params with every load call, so we do *not* call clearFilter.
					if (me.pageSize) {
						// if we're paging, we've changed the query so start at page 1.
						me.loadPage(1);
					} else {
						store.load(this.getLoadOptions(queryString));
					}
				}
			}

			// Clear current selection if it does not match the current value in the field
			if (me.getRawValue() !== me.getDisplayValue()) {
				me.ignoreSelection++;
				me.picker.getSelectionModel().deselectAll();
				me.ignoreSelection--;
			}

			if (isLocalMode) {
				me.doAutoSelect();
			}
			if (me.typeAhead) {
				me.doTypeAhead();
			}
		}
		return true;
	}

});