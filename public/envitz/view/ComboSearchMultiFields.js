/*
 * File: envitz/view/ComboSearchMultiFields.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.ComboSearchMultiFields', {
	extend: 'Ext.form.field.ComboBox',
	alias: 'widget.combosearchmultifields',

	itemId: 'mycombobox14',
	selectOnFocus: true,
	anyMatch: true,
	queryMode: 'local',
	typeAhead: true,
	typeAheadDelay: 240,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			searchFields: [
				
			]
		});

		me.callParent(arguments);
	},

	doLocalQuery: function(queryPlan) {
		/**
		 * Overridden to prefer searchFields array over displayFields for search vector.
		 * Searches all store fields in searchFields for matching data. If searchFields is NULL then use displayField
		 *
		 * This function requires the Ext.util.Filter to be overridden to support property as an array
		 * @protected
		 */

		var me = this,
			displayField = me.displayField,
			searchFields = (me.searchFields === undefined ? me.displayField : me.searchFields),
			queryString = queryPlan.query;

		// Create our filter when first needed
		if (!me.queryFilter) {
			// Create the filter that we will use during typing to filter the Store
			me.queryFilter = new Ext.util.Filter({
				id: me.id + '-query-filter',
				anyMatch: me.anyMatch,
				caseSensitive: me.caseSensitive,
				root: 'data',
				property: searchFields
			});
			me.store.addFilter(me.queryFilter, false);
		}

		// Querying by a string...
		if (queryString || !queryPlan.forceAll) {
			me.queryFilter.disabled = false;
			me.queryFilter.setValue(me.enableRegEx ? new RegExp(queryString) : queryString);
		}

		// If forceAll being used, or no query string, disable the filter
		else {
			me.queryFilter.disabled = true;
		}

		// Filter the Store according to the updated filter
		me.store.filter();

		// Expand after adjusting the filter unless there are no matches
		if (me.store.getCount()) {
			me.expand();
		} else {
			me.collapse();
		}

		me.afterQuery(queryPlan);
	}

});