/*
 * File: envitz/view/Project.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.Project', {
	extend: 'Ext.container.Container',

	requires: [
		'envitz.view.imagePreviewer',
		'Ext.tab.Panel',
		'Ext.form.Panel',
		'Ext.form.field.Hidden',
		'Ext.tab.Tab',
		'Ext.slider.Single',
		'Ext.form.field.Checkbox',
		'Ext.form.field.HtmlEditor',
		'Ext.form.field.ComboBox',
		'Ext.grid.Panel',
		'Ext.grid.View',
		'Ext.grid.column.CheckColumn',
		'Ext.grid.column.Action',
		'Ext.grid.plugin.CellEditing',
		'Ext.selection.RowModel',
		'Ext.Img',
		'Ext.form.field.Display',
		'Ext.XTemplate',
		'Ext.ux.form.field.BoxSelect',
		'envitz.view.CloseProject'
	],

	border: false,
	itemId: 'ProjectPanel',

	initComponent: function() {
		var me = this;		

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'tabpanel',
					tabBar: {
						xtype: 'tabbar',
						border: 0,
						minWidth: 100,
						plain: true,
						layout: {
							type: 'hbox',
							align: 'stretch',
							pack: 'end'
						}
					},
					border: 0,
					itemId: 'settingsTabPanel',
					defaults: {
						anchor: '100%'
					},
					activeTab: 0,
					minTabWidth: 100,
					plain: true,
					items: [
						{
							xtype: 'form',
							itemId: 'FormProj',
							defaults: {
								//anchor: '100%',
								padding: '5px'
							},
							bodyBorder: true,
							title: 'Edit',
							items: [
								me.processMAX_FILE_SIZE({
									xtype: 'hiddenfield',
									itemId: 'MAX_FILE_SIZE',
									fieldLabel: 'Label',
									name: 'MAX_FILE_SIZE'
								}),
								{
									xtype: 'container',
									layout: {
										type: 'hbox',
										align: 'stretch'
									},
									items: [
										{
											xtype: 'imagePreview',
											name: 'proj_img',
											src: '/images/Project.svg',
											itemId: 'projIMG'
										},
										{
											xtype: 'container',
											flex: 1,
											height: 85,
											margin: '0 0 0 10',
											items: [
												{
													xtype: 'textfield',
													height: 24,
													maxHeight: 24,
													width: 400,
													fieldLabel: '',
													name: 'proj_title',
													allowBlank: false,
													emptyText: 'Title of your project',
													vtype: 'NoTags'
												},
												me.processProj_progress({
													xtype: 'slider',
													width: 400,
													fieldLabel: 'Progress',
													name: 'proj_progress',
													value: 31
												}),
												{
													xtype: 'container',
													layout: {
														type: 'hbox',
														align: 'stretch'
													},
													items: [
														{
															xtype: 'checkboxfield',
															margins: '0 40 0 0',
															fieldLabel: 'Members write wall',
															labelSeparator: '?',
															labelWidth: 110,
															name: 'proj_isWallMemWritable',
															boxLabel: '',
															inputValue: '1'
														},
														{
															xtype: 'checkboxfield',
															fieldLabel: 'Public view wall',
															labelSeparator: '?',
															name: 'proj_isWallPublic',
															boxLabel: '',
															inputValue: '1'
														},
														{
															xtype: 'checkboxfield',
															fieldLabel: 'Allowed Membership Requests',
															labelSeparator: '?',
															labelWidth: 170,
															margins: '0 0 30 50',
															itemId: 'proj_isMemberShipOpenChk',
															name: 'proj_isMemberShipOpenChk',
															boxLabel: '',
															checked: LApp.formData.proj_isMemberShipOpen,
															handler: function(thisChkBox, status){
																var currVal = (status) ? 1 : 0;
																Ext.getCmp('proj_isMemberShipOpen').setValue(currVal);																
															}
														},
														{
															xtype: 'hiddenfield',															
															name: 'proj_isMemberShipOpen',
															id: 'proj_isMemberShipOpen',
															value: LApp.formData.proj_isMemberShipOpen,
														},
														{
															xtype: 'checkboxfield',
															hidden: true,
															fieldLabel: 'Public view wall',
															labelSeparator: '?',
															name: 'proj_isWallPublic',
															boxLabel: '',
															inputValue: ''
														},
														{
															xtype: 'checkboxfield',
															margins: '0 0 0 20',
															hidden: true,
															fieldLabel: 'Public write wall',
															labelSeparator: '?',
															name: 'proj_isWallPublicWritable',
															boxLabel: ''
														}														
													]
												}
											]
										}
									]
								},
								{
									xtype: 'htmleditor',
									anchor: '100%',
									height: 150,
									fieldLabel: '',
									name: 'proj_descript',
									enableFont: false,
									enableSourceEdit: false
								},
								{
									xtype: 'combobox',
									anchor: '100%',
									fieldLabel: 'Source Idea',
									labelAlign: 'top',
									name: 'proj_srcIdea',
									displayField: 'idea_title',
									store: 'idea',
									valueField: 'idea_id'
								}
							]
						},
						{
							xtype: 'gridpanel',
							itemId: 'MemberGridProj',
							minHeight: 200,
							header: false,
							title: 'Members',
							store: 'projectMember',
							columns: [
								{
									xtype: 'gridcolumn',
									renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
										var row = Ext.StoreMgr.lookup('user').findRecord('usr_id',value),
											name = row.get('usr_displayName');

										return "<img width='32' src='" + row.get('usr_icon') + "' /> " + (name === "" ? "(click to add)" : name);

									},
									itemId: 'mycolumn',
									width: 150,
									dataIndex: 'pMem_memberID',
									text: 'Member',
									editor: {
										xtype: 'combobox',
										itemId: 'membercombo',
										hideTrigger: true,
										displayField: 'usr_displayName',
										queryMode: 'local',
										store: 'user',
										valueField: 'usr_id'
									}
								},
								{
									xtype: 'gridcolumn',
									renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
										var store;

										try {
											store = Ext.StoreMgr.lookup('approveStatus');
											if (value) {
												return store.findRecord('id', value).get('text');
											}
											return "";
										} catch (e) {

										}

									},
									dataIndex: 'pMem_approvedState',
									text: 'Status',
									editor: me.processMyComboBox2({
										xtype: 'combobox',
										store: 'approveStatus',
										valueField: 'id'
									})
								},
								{
									xtype: 'gridcolumn',
									renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
										var store, record;

										try {
											if (value === 0) {
												return "";

											} else {
												store = Ext.StoreMgr.lookup('projectRole');
												record = store.findRecord('pRole_id', value);

												if (record) {
													return record.get('pRole_title');
												} else {
													return value;
												}

											}

										} catch (e) {

										}
									},
									width: 120,
									dataIndex: 'pMem_role',
									text: 'Role',
									editor: {
										xtype: 'combobox',
										itemId: 'mycombobox9',
										hideTrigger: true,
										displayField: 'pRole_title',
										store: 'projectRole',
										valueField: 'pRole_id'
									}
								},
								{
									xtype: 'checkcolumn',
									dataIndex: 'pMem_wallWrite',
									text: 'Write wall',
									editor: {
										xtype: 'checkboxfield'
									}
								},
								{
									xtype: 'checkcolumn',
									dataIndex: 'pMem_docManagerAccess',
									text: 'Access Doc',
									editor: {
										xtype: 'checkboxfield'
									}
								},
								{
									xtype: 'checkcolumn',
									itemId: 'mycheckcolumn5',
									dataIndex: 'pMem_toolBoxAccess',
									text: 'Access Toolbox',
									editor: {
										xtype: 'checkboxfield',
										itemId: 'mycheckbox11'
									}
								},
								{
									xtype: 'actioncolumn',
									width: 40,
									items: [
										{
											handler: function(view, rowIndex, colIndex, item, e, record, row) {

												view.getStore().removeAt(rowIndex);
											},
											getClass: function(v, metadata, r, rowIndex, colIndex, store) {
												if(r.data.pMem_isPM ===true || r.data.pMem_memberID===0) {
													return 'x-hide-display';
												}else{
													return 'icon-delete';
												}
											},
											altText: 'Remove',
											icon: '',
											iconCls: 'icon-delete'
										}
									]
								}
							],
							viewConfig: {
								border: true
							},
							plugins: [
								Ext.create('Ext.grid.plugin.CellEditing', {
									pluginId: 'edit',
									clicksToEdit: 1
								})
							],
							selModel: Ext.create('Ext.selection.RowModel', {

							})
						},
						{
							xtype: 'panel',
							itemId: 'previewProjPanel',
							header: false,
							title: 'Preview',
							items: [
								{
									xtype: 'form',
									border: false,
									itemId: 'previewProj',
									bodyBorder: false,
									frameHeader: false,
									header: false,
									title: 'Preview',
									items: [
										{
											xtype: 'container',
											layout: {
												type: 'hbox',
												align: 'stretch'
											},
											items: [
												me.processPreviewImg({
													xtype: 'image',
													itemId: 'previewImg',
													margin: 5,
													maxHeight: 64,
													minHeight: 64,
													width: 64,
													src: 'no-image.png'
												}),
												{
													xtype: 'container',
													flex: 1,
													margin: '0 0 0 20',
													items: [
														{
															xtype: 'displayfield',
															fieldLabel: '',
															name: 'proj_title',
															value: 'Display Field'
														},
														me.processProj_progress1({
															xtype: 'displayfield',
															itemId: 'proj_progress',
															fieldLabel: 'Progress',
															name: 'proj_progress',
															value: 'Display Field'
														})
													]
												}
											]
										},
										{
											xtype: 'dataview',
											itemCls: 'proj-mem-list',
											itemSelector: 'div.item',
											itemTpl: [
												'<span class="item" style="margin:5px;display:inline-block;"><img src="{usr_icon}" width="32" /></span>'
											],
											store: 'projectMember'
										},
										{
											xtype: 'displayfield',
											anchor: '100%',
											fieldLabel: '',
											name: 'proj_descript',
											value: 'Display Field'
										},
										{
											xtype: 'container',
											itemId: 'ideaRefPanel'
										}
									]
								}
							]
						}
					]
				},
				{
					xtype: 'container',
					margin: '30 0 0 100',
					padding: 10,
					items: [
						{
							xtype: 'button',
							itemId: 'btnSubmitProj',
							minWidth: 100,
							text: 'Save'
						},
						{
							xtype: 'button',
							itemId: 'btnCancelProj',
							margin: '0 0 0 20',
							minWidth: 100,
							text: 'Cancel'
						},
						me.processCloseProject({
							xtype: 'button',
							itemId: 'CloseProject',
							margin: '0 0 0 20',
							width: 100,
							text: 'Close Project'
						})
					]
				}
			]
		});

		me.callParent(arguments);
	},

	processMAX_FILE_SIZE: function(config) {
		config.value=LApp.MAX_FILE_SIZE;
		return config;
	},

	processProj_progress: function(config) {
		if(!LApp.editMode){
			config.hidden=true;
		}
		return config;
	},

	processMyComboBox2: function(config) {
		return config;
	},

	processPreviewImg: function(config) {
		if (LApp.imageSrc) {
			config.src = LApp.imageSrc;
		} else {
			config.src = "/images/Project.svg";
		}

		return config;

	},

	processProj_progress1: function(config) {
		if(!LApp.editMode){
			config.hidden=true;
		}
		return config;
	},

	processCloseProject: function(config) {
		if (!LApp.editMode) {
			config.hidden = true;
		}

		return config;

	}

});