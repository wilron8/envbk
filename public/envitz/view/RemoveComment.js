/*
 * File: envitz/view/RemoveComment.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.view.RemoveComment', {
	extend: 'Ext.window.Window',

	requires: [
		'Ext.container.Container',
		'Ext.form.field.TextArea',
		'Ext.button.Button'
	],

	height: 245,
	width: 430,
	layout: 'fit',
	title: 'Comment Management',
	titleAlign: 'center',
	plain: true,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					padding: 10,
					style: {
						backgroundColor: '#fff'
					},
					items: [
						me.processText2Remove({
							xtype: 'textareafield',
							height: 90,
							width: 400,
							fieldLabel: 'Really remove this comment',
							labelAlign: 'top',
							labelSeparator: '?',
							submitValue: false,
							validateOnChange: false,
							value: '{postMsg}',
							fieldStyle: 'border: 0',
							readOnly: true,
							rows: 5
						}),
						{
							xtype: 'container',
							height: 30,
							html: '<div style=\'color:red;\'>--- WARNING ---<BR>Comment will be permanently inaccessible to you <i>and</i> other users.</div>',
							margin: '20 0 0 0',
							minHeight: 30,
							style: {
								textAlign: 'center'
							},
							layout: 'anchor'
						},
						{
							xtype: 'container',
							margin: '15 0',
							style: {
								textAlign: 'center'
							},
							layout: 'anchor',
							items: [
								me.processRemove({
									xtype: 'button',
									handler: function(button, e) {
										var me = this;

										//console.log(me);

										button.setText("Sending...");
										button.setDisabled(true); //allow only one click while we wait for server reply.

										Ext.Ajax.request({ //TODO: base URL should be passed via process config
											url: me.URL,
											success: function(response) {
												var svrMsg = Ext.JSON.decode(response.responseText);
												if(svrMsg.success === true) {
													//we only close if no error, otherwise give user a chance to change reason, etc...
													me.close();
													//remove HTML DIV/SPAN from DOM;
													Ext.get(me.selector).remove();
													/*
													Ext.Msg.alert('Comment Management','The comment has been successfuly removed.',function(){
													Ext.get(me.selector).remove();
													});
													*/
												}else{
													button.setDisabled(false);
													button.setText("Remove");
													Alert('There was a technical problem in removing this idea.');
												}
											},
											failure: function() {
												button.setDisabled(false);
												button.setText("Remove");
												Alert('Comment Manager','Network Operation Timed-out. Your connection to the server was lost. Please check your Internet connection and try again later.');
											}

										});


									},
									margin: '0 30 0 0',
									width: 75,
									text: 'Remove'
								}),
								me.processCancel({
									xtype: 'button',
									handler: function(button, e) {
										this.close();
									},
									width: 75,
									text: 'Cancel'
								})
							]
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	processText2Remove: function(config) {
		var comment = Ext.get(this.selector).down("[class=body]").el.getHTML();

		comment = Ext.util.Format.stripTags(comment);
		config.value = Ext.util.Format.trim(comment);

		return config;
	},

	processRemove: function(config) {
		config.scope = this;
		return config;
	},

	processCancel: function(config) {
		config.scope = this;
		return config;
	}

});