/*
 * File: envitz/store/passCryptos.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('envitz.store.passCryptos', {
	extend: 'Ext.data.Store',
	alias: 'store.passCryptos',

	requires: [
		'envitz.model.passCypto',
		'Ext.data.proxy.Memory',
		'Ext.data.reader.Array'
	],

	constructor: function(cfg) {
		var me = this;
		cfg = cfg || {};
		me.callParent([Ext.apply({
			autoLoad: false,
			filterOnLoad: false,
			model: 'envitz.model.passCypto',
			sortOnLoad: false,
			storeId: 'passCryptos',
			data: [
				{
					crypto: 'Requirements',
					bonus: 1,
					deduction: 0
				},
				{
					crypto: 'Length',
					bonus: 1,
					deduction: 0
				},
				{
					acrypto: 'Uppercase',
					bonus: 1,
					deduction: 0
				},
				{
					crypto: 'Lowercase',
					bonus: 1,
					deduction: 0
				},
				{
					crypto: 'Number',
					bonus: 1,
					deduction: 0
				},
				{
					crypto: 'Symbols',
					bonus: 1,
					deduction: 0
				},
				{
					crypto: 'Unique',
					bonus: 1,
					deduction: 0
				},
				{
					crypto: 'Letters only',
					bonus: 1,
					deduction: 1
				},
				{
					crypto: 'Numbers only',
					bonus: 1,
					deduction: 1
				},
				{
					crypto: 'Repeat Letters',
					bonus: 1,
					deduction: 1
				},
				{
					crypto: 'Consec Numbers',
					bonus: 1,
					deduction: 1
				},
				{
					crypto: 'Consec Symbols',
					bonus: 1,
					deduction: 1
				},
				{
					crypto: 'Seq. Letters',
					bonus: 1,
					deduction: 1
				},
				{
					crypto: 'Seq. Numbers',
					bonus: 1,
					deduction: 1
				},
				{
					crypto: 'Seq. Symbols',
					bonus: 1,
					deduction: 1
				}
			],
			proxy: {
				type: 'memory',
				reader: {
					type: 'array',
					idProperty: 'crypto'
				}
			}
		}, cfg)]);
	}
});